{"version":3,"file":"app.min.js","sources":["../../../../node_modules/photoswipe/dist/photoswipe-lightbox.esm.js","../../app/js/blocks/menu.js","../../app/js/blocks/totop.js","../../../../node_modules/photoswipe/dist/photoswipe.esm.js","../../app/js/blocks/pswp.js"],"sourcesContent":["/*!\n  * PhotoSwipe Lightbox 5.1.61 - https://photoswipe.com\n  * (c) 2021 Dmitry Semenov\n  */\n/**\n  * Creates element and optionally appends it to another.\n  *\n  * @param {String} className\n  * @param {String|NULL} tagName\n  * @param {Element|NULL} appendToEl\n  */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName || 'div');\n  if (className) {\n    el.className = className;\n  }\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  }\n  return el;\n}\n\n/**\n * Apply width and height CSS properties to element\n */\nfunction setWidthHeight(el, w, h) {\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\n}\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error',\n};\n\n\n/**\n * Check if click or keydown event was dispatched\n * with a special key or via mouse wheel.\n *\n * @param {Event} e\n */\nfunction specialKeyUsed(e) {\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\n    return true;\n  }\n}\n\n/**\n * Parse `gallery` or `children` options.\n *\n * @param {Element|NodeList|String} option\n * @param {String|null} legacySelector\n * @param {Element|null} parent\n * @returns Element[]\n */\nfunction getElementsFromOption(option, legacySelector, parent = document) {\n  let elements = [];\n\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n\n  return elements;\n}\n\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n\n  return {\n    x: document.documentElement.clientWidth,\n\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n\n/**\n * Parses padding option.\n * Supported formats:\n *\n * // Object\n * padding: {\n *  top: 0,\n *  bottom: 0,\n *  left: 0,\n *  right: 0\n * }\n *\n * // A function that returns the object\n * paddingFn: (viewportSize) => {\n *  return {\n *    top: 0,\n *    bottom: 0,\n *    left: 0,\n *    right: 0\n *  };\n * }\n *\n * // Legacy variant\n * paddingLeft: 0,\n * paddingRight: 0,\n * paddingTop: 0,\n * paddingBottom: 0,\n *\n * @param {String} prop 'left', 'top', 'bottom', 'right'\n * @param {Object} options PhotoSwipe options\n * @param {Object} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\n * @returns {Number}\n */\nfunction parsePaddingOption(prop, options, viewportSize) {\n  let paddingValue;\n\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\n    if (options[legacyPropName]) {\n      paddingValue = options[legacyPropName];\n    }\n  }\n\n  return paddingValue || 0;\n}\n\n\nfunction getPanAreaSize(options, viewportSize/*, pswp*/) {\n  return {\n    x: viewportSize.x\n      - parsePaddingOption('left', options, viewportSize)\n      - parsePaddingOption('right', options, viewportSize),\n    y: viewportSize.y\n      - parsePaddingOption('top', options, viewportSize)\n      - parsePaddingOption('bottom', options, viewportSize)\n  };\n}\n\n/**\n * Calculates zoom levels for specific slide.\n * Depends on viewport size and image size.\n */\n\nconst MAX_IMAGE_WIDTH = 4000;\n\nclass ZoomLevel {\n  /**\n   * @param {Object} options PhotoSwipe options\n   * @param {Object} itemData Slide data\n   * @param {Integer} index Slide index\n   * @param {PhotoSwipe|undefined} pswp PhotoSwipe instance, can be undefined if not initialized yet\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n  }\n\n  /**\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\n   *\n   * It should be called when either image or viewport size changes.\n   *\n   * @param {Slide} slide\n   */\n  update(maxWidth, maxHeight, panAreaSize) {\n    this.elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n\n    this.panAreaSize = panAreaSize;\n\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\n\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\n\n    // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n    this.vFill = Math.min(1, vRatio);\n\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(\n      this.initial,\n      this.secondary,\n      this._getMax()\n    );\n\n    this.min = Math.min(\n      this.fit,\n      this.initial,\n      this.secondary\n    );\n\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\n    }\n  }\n\n  /**\n   * Parses user-defined zoom option.\n   *\n   * @param {Mixed} optionPrefix Zoom level option prefix (initial, secondary, max)\n   */\n  _parseZoomLevelOption(optionPrefix) {\n    // zoom.initial\n    // zoom.secondary\n    // zoom.max\n    const optionValue = this.options[optionPrefix + 'ZoomLevel'];\n\n    if (!optionValue) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n\n    return Number(optionValue);\n  }\n\n  /**\n   * Get zoom level to which image will be zoomed after double-tap gesture,\n   * or when user clicks on zoom icon,\n   * or mouse-click on image itself.\n   * If you return 1 image will be zoomed to its original size.\n   *\n   * @return {Number}\n   */\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    }\n\n    // 3x of \"fit\" state, but not larger than original\n    currZoomLevel = Math.min(1, this.fit * 3);\n\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n\n    return currZoomLevel;\n  }\n\n  /**\n   * Get initial image zoom level.\n   *\n   * @return {Number}\n   */\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n\n  /**\n   * Maximum zoom level when user zooms\n   * via zoom/pinch gesture,\n   * via cmd/ctrl-wheel or via trackpad.\n   *\n   * @return {Number}\n   */\n  _getMax() {\n    const currZoomLevel = this._parseZoomLevelOption('max');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    }\n\n    // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n    return Math.max(1, this.fit * 4);\n  }\n}\n\n/**\n * Lazy-load an image\n * This function is used both by Lightbox and PhotoSwipe core,\n * thus it can be called before dialog is opened.\n *\n * @param {Object} itemData Data about the slide\n * @param {PhotoSwipeBase}  instance PhotoSwipe or PhotoSwipeLightbox\n * @returns {Object|Boolean} Image that is being decoded or false.\n */\nfunction lazyLoadData(itemData, instance) {\n  const ContentClass = instance.getContentClass(itemData);\n\n  if (!ContentClass) {\n    return;\n  }\n\n  // src/slide/content/content.js\n  const content = new ContentClass(itemData, instance);\n\n  if (!content.lazyLoad) {\n    return;\n  }\n\n  const { options } = instance;\n\n  // We need to know dimensions of the image to preload it,\n  // as it might use srcset and we need to define sizes\n  const viewportSize = instance.viewportSize || getViewportSize(options);\n  const panAreaSize = getPanAreaSize(options, viewportSize);\n\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\n  zoomLevel.update(content.width, content.height, panAreaSize);\n\n  content.lazyLoad();\n  content.setDisplayedSize(\n    Math.ceil(content.width * zoomLevel.initial),\n    Math.ceil(content.height * zoomLevel.initial)\n  );\n}\n\n/**\n * Lazy-loads specific slide.\n * This function is used both by Lightbox and PhotoSwipe core,\n * thus it can be called before dialog is opened.\n *\n * By default it loads image based on viewport size and initial zoom level.\n *\n * @param {Integer} index Slide index\n * @param {Object}  instance PhotoSwipe or PhotoSwipeLightbox eventable instance\n */\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\n    return;\n  }\n\n  lazyLoadData(itemData, instance);\n}\n\nfunction dynamicImportModule(module) {\n  return typeof module === 'string' ? import(/* webpackIgnore: true */ module) : module;\n}\n\n/**\n * Base PhotoSwipe event object\n */\nclass PhotoSwipeEvent {\n  constructor(type, details) {\n    this.type = type;\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n}\n\n/**\n * PhotoSwipe base class that can listen and dispatch for events.\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\n */\nclass Eventable {\n  constructor() {\n    this._listeners = {};\n  }\n\n  on(name, fn) {\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n    this._listeners[name].push(fn);\n\n    // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n    if (this.pswp) {\n      this.pswp.on(name, fn);\n    }\n  }\n\n  off(name, fn) {\n    if (this._listeners[name]) {\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\n    }\n\n    if (this.pswp) {\n      this.pswp.off(name, fn);\n    }\n  }\n\n  dispatch(name, details) {\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n\n    const event = new PhotoSwipeEvent(name, details);\n\n    if (!this._listeners) {\n      return event;\n    }\n\n    if (this._listeners[name]) {\n      this._listeners[name].forEach((listener) => {\n        listener.call(this, event);\n      });\n    }\n\n    return event;\n  }\n}\n\nclass Content {\n  /**\n   * @param {Object} itemData Slide data\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\n   * @param {Slide|undefined} slide Slide that requested the image,\n   *                                can be undefined if image was requested by something else\n   *                                (for example by lazy-loader)\n   */\n  constructor(itemData, instance, slide) {\n    this.options = instance.options;\n    this.instance = instance;\n    this.data = itemData;\n\n    if (slide) {\n      this.slide = slide;\n      this.pswp = slide.pswp;\n    }\n\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n\n    this.state = LOAD_STATE.IDLE;\n  }\n\n  /**\n   * Load the content\n   *\n   * @param {Boolean} isLazy If method is executed by lazy-loader\n   */\n  load(/* isLazy */) {\n    if (!this.element) {\n      this.element = createElement('pswp__content');\n      this.element.style.position = 'absolute';\n      this.element.style.left = 0;\n      this.element.style.top = 0;\n      this.element.innerHTML = this.data.html || '';\n    }\n  }\n\n  isZoomable() {\n    return false;\n  }\n\n  usePlaceholder() {\n    return false;\n  }\n\n  activate() {\n\n  }\n\n  deactivate() {\n\n  }\n\n  setDisplayedSize(width, height) {\n    if (this.element) {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n\n    if (this.slide) {\n      this.pswp.dispatch('loadComplete', { slide: this.slide });\n    }\n  }\n\n  // If the placeholder should be kept in DOM\n  keepPlaceholder() {\n    return (this.state === LOAD_STATE.LOADING);\n  }\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n\n    if (this.slide) {\n      this.pswp.dispatch('loadComplete', { slide: this.slide, isError: true });\n      this.pswp.dispatch('loadError', { slide: this.slide });\n    }\n  }\n\n  getErrorElement() {\n    return false;\n  }\n\n  appendTo(container) {\n    if (this.element && !this.element.parentNode) {\n      container.appendChild(this.element);\n    }\n  }\n\n  destroy() {\n\n  }\n}\n\nclass ImageContent extends Content {\n  load(/* isLazy */) {\n    if (this.element) {\n      return;\n    }\n\n    const imageSrc = this.data.src;\n\n    if (!imageSrc) {\n      return;\n    }\n\n    this.element = createElement('pswp__img', 'img');\n\n    if (this.data.srcset) {\n      this.element.srcset = this.data.srcset;\n    }\n\n    this.element.src = imageSrc;\n\n    this.element.alt = this.data.alt || '';\n\n    this.state = LOAD_STATE.LOADING;\n\n    if (this.element.complete) {\n      this.onLoaded();\n    } else {\n      this.element.onload = () => {\n        this.onLoaded();\n      };\n\n      this.element.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n\n  setDisplayedSize(width, height) {\n    const image = this.element;\n    if (image) {\n      setWidthHeight(image, width, 'auto');\n\n      // Handle srcset sizes attribute.\n      //\n      // Never lower quality, if it was increased previously.\n      // Chrome does this automatically, Firefox and Safari do not,\n      // so we store largest used size in dataset.\n      if (image.srcset\n          && (!image.dataset.largestUsedSize || width > image.dataset.largestUsedSize)) {\n        image.sizes = width + 'px';\n        image.dataset.largestUsedSize = width;\n      }\n\n      if (this.slide) {\n        this.pswp.dispatch('imageSizeChange', { slide: this.slide, width, height });\n      }\n    }\n  }\n\n  isZoomable() {\n    return (this.state !== LOAD_STATE.ERROR);\n  }\n\n  usePlaceholder() {\n    return true;\n  }\n\n  lazyLoad() {\n    this.load();\n  }\n\n  destroy() {\n    if (this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = null;\n    }\n  }\n\n  appendTo(container) {\n    // Use decode() on nearby slides\n    //\n    // Nearby slide images are in DOM and not hidden via display:none.\n    // However, they are placed offscreen (to the left and right side).\n    //\n    // Some browsers do not composite the image until it's actually visible,\n    // using decode() helps.\n    //\n    // You might ask \"why dont you just decode() and then append all images\",\n    // that's because I want to show image before it's fully loaded,\n    // as browser can render parts of image while it is loading.\n    if (this.slide && !this.slide.isActive && ('decode' in this.element)) {\n      this.isDecoding = true;\n      // Make sure that we start decoding on the next frame\n      requestAnimationFrame(() => {\n        if (this.element) {\n          this.element.decode().then(() => {\n            this.isDecoding = false;\n            requestAnimationFrame(() => {\n              this.appendImageTo(container);\n            });\n          }).catch(() => {});\n        }\n      });\n    } else {\n      this.appendImageTo(container);\n    }\n  }\n\n  activate() {\n    if (this.slide && this.slide.container && this.isDecoding) {\n      // add image to slide when it becomes active,\n      // even if it's not finished decoding\n      this.appendImageTo(this.slide.container);\n    }\n  }\n\n  getErrorElement() {\n    const el = createElement('pswp__error-msg-container');\n    el.innerHTML = this.options.errorMsg;\n    const linkEl = el.querySelector('a');\n    if (linkEl) {\n      linkEl.href = this.data.src;\n    }\n    return el;\n  }\n\n  appendImageTo(container) {\n    // ensure that element exists and is not already appended\n    if (this.element && !this.element.parentNode) {\n      container.appendChild(this.element);\n    }\n  }\n}\n\n/**\n * PhotoSwipe base class that can retrieve data about every slide.\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\n */\n\nclass PhotoSwipeBase extends Eventable {\n  constructor() {\n    super();\n    this.contentTypes = {\n      image: ImageContent,\n      html: Content\n    };\n  }\n\n  /**\n   * Get total number of slides\n   */\n  getNumItems() {\n    let numItems;\n    const { dataSource } = this.options;\n    if (!dataSource) {\n      numItems = 0;\n    } else if (dataSource.length) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if (dataSource.gallery) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    }\n\n    // allow to filter number of items\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n\n    return event.numItems;\n  }\n\n  /**\n   * Add or set slide content type\n   *\n   * @param {String} type\n   * @param {Class} ContentClass\n   */\n  addContentType(type, ContentClass) {\n    this.contentTypes[type] = ContentClass;\n  }\n\n  /**\n   * Get slide content class based on its data\n   *\n   * @param {Object} slideData\n   * @param {Integer} slideIndex\n   * @returns Class\n   */\n  getContentClass(slideData) {\n    if (slideData.type) {\n      return this.contentTypes[slideData.type];\n    } else if (slideData.src) {\n      return this.contentTypes.image;\n    } else if (slideData.html) {\n      return this.contentTypes.html;\n    }\n  }\n\n  /**\n   * Get item data by index.\n   *\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\n   * For example, it may contain properties like\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\n   *\n   * @param {Integer} index\n   */\n  getItemData(index) {\n    const { dataSource } = this.options;\n    let dataSourceItem;\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && dataSource.gallery) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallerySelecor and childSelector options\n\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      dataSourceItem = dataSource.items[index];\n    }\n\n    let itemData = dataSourceItem;\n\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    }\n\n    // allow to filter itemData\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n\n    return event.itemData;\n  }\n\n  /**\n   * Get array of gallery DOM elements,\n   * based on childSelector and gallery element.\n   *\n   * @param {Element} galleryElement\n   */\n  _getGalleryDOMElements(galleryElement) {\n    if (this.options.children || this.options.childSelector) {\n      return getElementsFromOption(\n        this.options.children,\n        this.options.childSelector,\n        galleryElement\n      ) || [];\n    }\n\n    return [galleryElement];\n  }\n\n  /**\n   * Converts DOM element to item data object.\n   *\n   * @param {Element} element DOM element\n   */\n  // eslint-disable-next-line class-methods-use-this\n  _domElementToItemData(element) {\n    const itemData = {\n      element\n    };\n\n    const linkEl = element.tagName === 'A' ? element : element.querySelector('a');\n\n    if (!linkEl) {\n      return itemData;\n    }\n\n    // src comes from data-pswp-src attribute,\n    // if it's empty link href is used\n    itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n\n    itemData.srcset = linkEl.dataset.pswpSrcset;\n\n    itemData.w = parseInt(linkEl.dataset.pswpWidth, 10);\n    itemData.h = parseInt(linkEl.dataset.pswpHeight, 10);\n\n    if (linkEl.dataset.pswpType) {\n      itemData.type = linkEl.dataset.pswpType;\n    }\n\n    const thumbnailEl = element.querySelector('img');\n\n    if (thumbnailEl) {\n      // define msrc only if it's the first slide,\n      // as rendering (even small stretched thumbnail) is an expensive operation\n      itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n      itemData.alt = thumbnailEl.getAttribute('alt');\n    }\n\n    if (linkEl.dataset.cropped) {\n      itemData.thumbCropped = true;\n    }\n\n    return itemData;\n  }\n}\n\n/**\n * PhotoSwipe lightbox\n *\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\n * - Binds click event to links that should open PhotoSwipe\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\n * - Initializes PhotoSwipe\n *\n *\n * Loader options use the same object as PhotoSwipe, and supports such options:\n *\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\n * children - Element | Element[] | NodeList | string selector for the gallery children\n *\n */\n\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\n  constructor(options) {\n    super();\n    this.options = options || {};\n    this._uid = 0;\n  }\n\n  init() {\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\n\n    // Bind click events to each gallery\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\n      .forEach((galleryElement) => {\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\n      });\n  }\n\n  onThumbnailsClick(e) {\n    // Exit and allow default browser action if:\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\n        || window.pswp // ... if PhotoSwipe is already open\n        || window.navigator.onLine === false) { // ... if offline\n      return;\n    }\n\n    // If both clientX and clientY are 0 or not defined,\n    // the event is likely triggered by keyboard,\n    // so we do not pass the initialPoint\n    //\n    // Note that some screen readers emulate the mouse position,\n    // so it's not ideal way to detect them.\n    //\n    let initialPoint = { x: e.clientX, y: e.clientY };\n\n    if (!initialPoint.x && !initialPoint.y) {\n      initialPoint = null;\n    }\n\n    const clickedIndex = this.getClickedIndex(e);\n    const dataSource = {\n      gallery: e.currentTarget\n    };\n\n    if (clickedIndex >= 0) {\n      e.preventDefault();\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\n    }\n  }\n\n  /**\n   * Get index of gallery item that was clicked.\n   *\n   * @param {Event} e click event\n   */\n  getClickedIndex(e) {\n    if (this.options.getClickedIndexFn) {\n      return this.options.getClickedIndexFn.call(this, e);\n    }\n\n    const clickedTarget = e.target;\n    const childElements = getElementsFromOption(\n      this.options.children,\n      this.options.childSelector,\n      e.currentTarget\n    );\n    const clickedChildIndex = childElements.findIndex(\n      child => child === clickedTarget || child.contains(clickedTarget)\n    );\n\n    if (clickedChildIndex !== -1) {\n      return clickedChildIndex;\n    } else if (this.options.children || this.options.childSelector) {\n      // click wasn't on a child element\n      return -1;\n    }\n\n    // There is only one item (which is the gallery)\n    return 0;\n  }\n\n  /**\n   * Load and open PhotoSwipe\n   *\n   * @param {Integer} index\n   * @param {Array|Object|null} dataSource\n   * @param {Point|null} initialPoint\n   */\n  loadAndOpen(index, dataSource, initialPoint) {\n    // Check if the gallery is already open\n    if (window.pswp) {\n      return false;\n    }\n\n    // set initial index\n    this.options.index = index;\n\n    // define options for PhotoSwipe constructor\n    this.options.initialPointerPos = initialPoint;\n\n    this.shouldOpen = true;\n    this.preload(index, dataSource);\n    return true;\n  }\n\n  /**\n   * Load the main module and the slide content by index\n   *\n   * @param {Integer} index\n   */\n  preload(index, dataSource) {\n    const { options } = this;\n\n    if (dataSource) {\n      options.dataSource = dataSource;\n    }\n\n    // Add the main module\n    const promiseArray = [dynamicImportModule(options.pswpModule)];\n\n    // Add custom-defined promise, if any\n    if (typeof options.openPromise === 'function') {\n      // allow developers to perform some task before opening\n      promiseArray.push(options.openPromise());\n    }\n\n    if (options.preloadFirstSlide !== false && index >= 0) {\n      lazyLoadSlide(index, this);\n    }\n\n    // Wait till all promises resolve and open PhotoSwipe\n    const uid = ++this._uid;\n    Promise.all(promiseArray).then((iterableModules) => {\n      if (this.shouldOpen) {\n        const mainModule = iterableModules[0];\n        this._openPhotoswipe(mainModule, uid);\n      }\n    });\n  }\n\n  _openPhotoswipe(module, uid) {\n    // Cancel opening if UID doesn't match the current one\n    // (if user clicked on another gallery item before current was loaded).\n    //\n    // Or if shouldOpen flag is set to false\n    // (developer may modify it via public API)\n    if (uid !== this._uid && this.shouldOpen) {\n      return;\n    }\n\n    this.shouldOpen = false;\n\n    // PhotoSwipe is already open\n    if (window.pswp) {\n      return;\n    }\n\n    // Pass data to PhotoSwipe and open init\n    const pswp = typeof module === 'object'\n        ? new module.default(null, this.options) // eslint-disable-line\n        : new module(null, this.options); // eslint-disable-line\n\n    this.pswp = pswp;\n    window.pswp = pswp;\n\n    // map listeners from Lightbox to PhotoSwipe Core\n    Object.keys(this._listeners).forEach((name) => {\n      this._listeners[name].forEach((fn) => {\n        pswp.on(name, fn);\n      });\n    });\n\n    // same with content types\n    pswp.contentTypes = { ...this.contentTypes };\n\n    pswp.on('destroy', () => {\n      // clean up public variables\n      this.pswp = null;\n      window.pswp = null;\n    });\n\n    pswp.init();\n  }\n\n  destroy() {\n    if (this.pswp) {\n      this.pswp.close();\n    }\n\n    this.shouldOpen = false;\n    this._listeners = null;\n\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\n      .forEach((galleryElement) => {\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\n      });\n  }\n}\n\nexport { Content, ImageContent, PhotoSwipeLightbox as default };\n//# sourceMappingURL=photoswipe-lightbox.esm.js.map\n","// menu.js ... Auto hide navbar\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const header = document.querySelector('.nav-autohide')\n  let scrolling = false\n  let previousTop = 0\n  let scrollDelta = 10\n  let scrollOffset = 250\n\n  document.addEventListener('scroll', () => {\n    if (!scrolling) {\n      scrolling = true\n\n      if (!window.requestAnimationFrame) {\n        setTimeout(autoHideHeader, 250)\n      } else {\n        requestAnimationFrame(autoHideHeader)\n      }\n    }\n  })\n\n  function autoHideHeader() {\n    let currentTop = (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop\n\n    // Scrolling up\n    if (previousTop - currentTop > scrollDelta || currentTop === 0) {\n      header.classList.remove('is-hidden')\n    } else if (currentTop - previousTop > scrollDelta && currentTop > scrollOffset) {\n      // Scrolling down\n      header.classList.add('is-hidden')\n    }\n\n    previousTop = currentTop\n    scrolling = false\n  }\n})\n","// totop.js ... back to top button\n\nfunction eventScrollToTop() {\n  let flag = false\n  const metka = 300\n  const arrowUp = document.getElementById('scrolltotop')\n\n  window.addEventListener('scroll', function () {\n    let counter = this.scrollY\n    if (counter > metka) {\n      arrowUp.classList.add('on')\n      arrowUp.classList.remove('down')\n      flag = true\n    }\n    if (counter <= metka && flag == true) {\n      arrowUp.classList.add('down')\n      arrowUp.classList.remove('on')\n      flag = false\n    }\n  })\n\n  arrowUp.onclick = function (event) {\n    // event.preventDefault();\n    window.scrollTo({\n      left: this.scrollX,\n      top: 0,\n      behavior: 'smooth',\n    })\n  }\n}\n\n// Блок загрузки кода scrol to top\nfunction scrollToTopLoader() {\n  let codScroll = `\n  <div id=\"scrolltotop\">\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M12 22V2M12 2L2 12M12 2L22 12\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    </svg>\n  </div>\n  `\n  let el = document.getElementsByTagName('script')\n  el[el.length - 1].insertAdjacentHTML('afterend', codScroll)\n}\n\n// Запуск кнопки scrollToTop после полной загрузки DOM для экранов с viwport более 340px\ndocument.addEventListener('DOMContentLoaded', () => {\n  let intViewportWidth = window.innerWidth // viwport X\n  let intViewportHeight = window.innerHeight // viewport Y\n  if (intViewportWidth >= 340) {\n    scrollToTopLoader()\n    eventScrollToTop()\n  }\n})\n","/*!\n  * PhotoSwipe 5.1.61 - https://photoswipe.com\n  * (c) 2021 Dmitry Semenov\n  */\n/**\n  * Creates element and optionally appends it to another.\n  *\n  * @param {String} className\n  * @param {String|NULL} tagName\n  * @param {Element|NULL} appendToEl\n  */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName || 'div');\n  if (className) {\n    el.className = className;\n  }\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  }\n  return el;\n}\n\nfunction equalizePoints(p1, p2) {\n  p1.x = p2.x;\n  p1.y = p2.y;\n  if (p2.id !== undefined) {\n    p1.id = p2.id;\n  }\n  return p1;\n}\n\n\nfunction roundPoint(p) {\n  p.x = Math.round(p.x);\n  p.y = Math.round(p.y);\n}\n\n/**\n * Returns distance between two points.\n *\n * @param {Object} p1 Point\n * @param {Object} p2 Point\n */\nfunction getDistanceBetween(p1, p2) {\n  const x = Math.abs(p1.x - p2.x);\n  const y = Math.abs(p1.y - p2.y);\n  return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * Whether X and Y positions of points are qual\n *\n * @param {Object} p1\n * @param {Object} p2\n */\nfunction pointsEqual(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n\n/**\n * The float result between the min and max values.\n *\n * @param {Number} val\n * @param {Number} min\n * @param {Number} max\n */\nfunction clamp(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n\n/**\n * Get transform string\n *\n * @param {Number} x\n * @param {Number|null} y\n * @param {Number|null} scale\n */\nfunction toTransformString(x, y, scale) {\n  let propValue = 'translate3d('\n    + x + 'px,' + (y || 0) + 'px'\n    + ',0)';\n\n  if (scale !== undefined) {\n    propValue += ' scale3d('\n      + scale + ',' + scale\n      + ',1)';\n  }\n\n  return propValue;\n}\n\n/**\n * Apply transform:translate(x, y) scale(scale) to element\n *\n * @param {DOMElement} el\n * @param {Number} x\n * @param {Number|null} y\n * @param {Number|null} scale\n */\nfunction setTransform(el, x, y, scale) {\n  el.style.transform = toTransformString(x, y, scale);\n}\n\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\n\n/**\n * Apply CSS transition to element\n *\n * @param {Element} el\n * @param {String} prop CSS property to animate\n * @param {Number} duration in ms\n * @param {String|NULL} ease CSS easing function\n */\nfunction setTransitionStyle(el, prop, duration, ease) {\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\n  el.style.transition = prop\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\n    : 'none';\n}\n\n/**\n * Apply width and height CSS properties to element\n */\nfunction setWidthHeight(el, w, h) {\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\n}\n\nfunction removeTransitionStyle(el) {\n  setTransitionStyle(el);\n}\n\nfunction decodeImage(img) {\n  if ('decode' in img) {\n    return img.decode();\n  }\n\n  if (img.complete) {\n    return Promise.resolve(img);\n  }\n\n  return new Promise((resolve, reject) => {\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n  });\n}\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error',\n};\n\n\n/**\n * Check if click or keydown event was dispatched\n * with a special key or via mouse wheel.\n *\n * @param {Event} e\n */\nfunction specialKeyUsed(e) {\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\n    return true;\n  }\n}\n\n/**\n * Parse `gallery` or `children` options.\n *\n * @param {Element|NodeList|String} option\n * @param {String|null} legacySelector\n * @param {Element|null} parent\n * @returns Element[]\n */\nfunction getElementsFromOption(option, legacySelector, parent = document) {\n  let elements = [];\n\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n\n  return elements;\n}\n\n// Detect passive event listener support\nlet supportsPassive = false;\n/* eslint-disable */\ntry {\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n    get: () => {\n      supportsPassive = true;\n    }\n  }));\n} catch (e) {}\n/* eslint-enable */\n\nclass DOMEvents {\n  constructor() {\n    this._pool = [];\n  }\n\n  /**\n   * Adds event listeners\n   *\n   * @param {DOMElement} target\n   * @param {String} type Can be multiple, separated by space.\n   * @param {Function} listener\n   * @param {Boolean} passive\n   */\n  add(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive);\n  }\n\n  /**\n   * Removes event listeners\n   *\n   * @param {DOMElement} target\n   * @param {String} type\n   * @param {Function} listener\n   * @param {Boolean} passive\n   */\n  remove(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive, true);\n  }\n\n  /**\n   * Removes all bound events\n   */\n  removeAll() {\n    this._pool.forEach((poolItem) => {\n      this._toggleListener(\n        poolItem.target,\n        poolItem.type,\n        poolItem.listener,\n        poolItem.passive,\n        true,\n        true\n      );\n    });\n    this._pool = [];\n  }\n\n  /**\n   * Adds or removes event\n   *\n   * @param {DOMElement} target\n   * @param {String} type\n   * @param {Function} listener\n   * @param {Boolean} passive\n   * @param {Boolean} unbind Whether the event should be added or removed\n   * @param {Boolean} skipPool Whether events pool should be skipped\n   */\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\n    if (!target) {\n      return;\n    }\n\n    const methodName = (unbind ? 'remove' : 'add') + 'EventListener';\n    type = type.split(' ');\n    type.forEach((eType) => {\n      if (eType) {\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\n        // so developer doesn't need to do this manually\n        if (!skipPool) {\n          if (unbind) {\n            // Remove from the events pool\n            this._pool = this._pool.filter((poolItem) => {\n              return poolItem.type !== eType\n                || poolItem.listener !== listener\n                || poolItem.target !== target;\n            });\n          } else {\n            // Add to the events pool\n            this._pool.push({\n              target,\n              type: eType,\n              listener,\n              passive\n            });\n          }\n        }\n\n\n        // most PhotoSwipe events call preventDefault,\n        // and we do not need browser to scroll the page\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\n\n        target[methodName](\n          eType,\n          listener,\n          eventOptions\n        );\n      }\n    });\n  }\n}\n\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n\n  return {\n    x: document.documentElement.clientWidth,\n\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n\n/**\n * Parses padding option.\n * Supported formats:\n *\n * // Object\n * padding: {\n *  top: 0,\n *  bottom: 0,\n *  left: 0,\n *  right: 0\n * }\n *\n * // A function that returns the object\n * paddingFn: (viewportSize) => {\n *  return {\n *    top: 0,\n *    bottom: 0,\n *    left: 0,\n *    right: 0\n *  };\n * }\n *\n * // Legacy variant\n * paddingLeft: 0,\n * paddingRight: 0,\n * paddingTop: 0,\n * paddingBottom: 0,\n *\n * @param {String} prop 'left', 'top', 'bottom', 'right'\n * @param {Object} options PhotoSwipe options\n * @param {Object} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\n * @returns {Number}\n */\nfunction parsePaddingOption(prop, options, viewportSize) {\n  let paddingValue;\n\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\n    if (options[legacyPropName]) {\n      paddingValue = options[legacyPropName];\n    }\n  }\n\n  return paddingValue || 0;\n}\n\n\nfunction getPanAreaSize(options, viewportSize/*, pswp*/) {\n  return {\n    x: viewportSize.x\n      - parsePaddingOption('left', options, viewportSize)\n      - parsePaddingOption('right', options, viewportSize),\n    y: viewportSize.y\n      - parsePaddingOption('top', options, viewportSize)\n      - parsePaddingOption('bottom', options, viewportSize)\n  };\n}\n\n/**\n * Calculates minimum, maximum and initial (center) bounds of a slide\n */\n\nclass PanBounds {\n  constructor(slide) {\n    this.slide = slide;\n\n    this.currZoomLevel = 1;\n\n    this.center = {};\n    this.max = {};\n    this.min = {};\n\n    this.reset();\n  }\n\n  // _getItemBounds\n  update(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n\n    if (!this.slide.width) {\n      this.reset();\n    } else {\n      this._updateAxis('x');\n      this._updateAxis('y');\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\n    }\n  }\n\n  // _calculateItemBoundsForAxis\n  _updateAxis(axis) {\n    const { pswp } = this.slide;\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\n    const paddingProp = axis === 'x' ? 'left' : 'top';\n    const padding = parsePaddingOption(paddingProp, pswp.options, pswp.viewportSize);\n\n    const panAreaSize = this.slide.panAreaSize[axis];\n\n    // Default position of element.\n    // By defaul it is center of viewport:\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\n\n    // maximum pan position\n    this.max[axis] = (elSize > panAreaSize)\n      ? Math.round(panAreaSize - elSize) + padding\n      : this.center[axis];\n\n    // minimum pan position\n    this.min[axis] = (elSize > panAreaSize)\n      ? padding\n      : this.center[axis];\n  }\n\n  // _getZeroBounds\n  reset() {\n    this.center.x = 0;\n    this.center.y = 0;\n    this.max.x = 0;\n    this.max.y = 0;\n    this.min.x = 0;\n    this.min.y = 0;\n  }\n\n  /**\n   * Correct pan position if it's beyond the bounds\n   *\n   * @param {String} axis x or y\n   * @param {Object} panOffset\n   */\n  correctPan(axis, panOffset) { // checkPanBounds\n    return clamp(panOffset, this.max[axis], this.min[axis]);\n  }\n}\n\n/**\n * Calculates zoom levels for specific slide.\n * Depends on viewport size and image size.\n */\n\nconst MAX_IMAGE_WIDTH = 4000;\n\nclass ZoomLevel {\n  /**\n   * @param {Object} options PhotoSwipe options\n   * @param {Object} itemData Slide data\n   * @param {Integer} index Slide index\n   * @param {PhotoSwipe|undefined} pswp PhotoSwipe instance, can be undefined if not initialized yet\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n  }\n\n  /**\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\n   *\n   * It should be called when either image or viewport size changes.\n   *\n   * @param {Slide} slide\n   */\n  update(maxWidth, maxHeight, panAreaSize) {\n    this.elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n\n    this.panAreaSize = panAreaSize;\n\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\n\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\n\n    // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n    this.vFill = Math.min(1, vRatio);\n\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(\n      this.initial,\n      this.secondary,\n      this._getMax()\n    );\n\n    this.min = Math.min(\n      this.fit,\n      this.initial,\n      this.secondary\n    );\n\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\n    }\n  }\n\n  /**\n   * Parses user-defined zoom option.\n   *\n   * @param {Mixed} optionPrefix Zoom level option prefix (initial, secondary, max)\n   */\n  _parseZoomLevelOption(optionPrefix) {\n    // zoom.initial\n    // zoom.secondary\n    // zoom.max\n    const optionValue = this.options[optionPrefix + 'ZoomLevel'];\n\n    if (!optionValue) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n\n    return Number(optionValue);\n  }\n\n  /**\n   * Get zoom level to which image will be zoomed after double-tap gesture,\n   * or when user clicks on zoom icon,\n   * or mouse-click on image itself.\n   * If you return 1 image will be zoomed to its original size.\n   *\n   * @return {Number}\n   */\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    }\n\n    // 3x of \"fit\" state, but not larger than original\n    currZoomLevel = Math.min(1, this.fit * 3);\n\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n\n    return currZoomLevel;\n  }\n\n  /**\n   * Get initial image zoom level.\n   *\n   * @return {Number}\n   */\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n\n  /**\n   * Maximum zoom level when user zooms\n   * via zoom/pinch gesture,\n   * via cmd/ctrl-wheel or via trackpad.\n   *\n   * @return {Number}\n   */\n  _getMax() {\n    const currZoomLevel = this._parseZoomLevelOption('max');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    }\n\n    // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n    return Math.max(1, this.fit * 4);\n  }\n}\n\nclass Placeholder {\n  /**\n   * @param {String|false} imageSrc\n   * @param {Element} container\n   */\n  constructor(imageSrc, container) {\n    // Create placeholder\n    // (stretched thumbnail or simple div behind the main image)\n    this.element = createElement(\n      'pswp__img pswp__img--placeholder',\n      imageSrc ? 'img' : '',\n      container\n    );\n\n    if (imageSrc) {\n      this.element.decoding = 'async';\n      this.element.alt = '';\n      this.element.src = imageSrc;\n      this.element.setAttribute('role', 'presentation');\n    }\n\n    this.element.setAttribute('aria-hiden', 'true');\n  }\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.element.tagName === 'IMG') {\n      // Use transform scale() to modify img placeholder size\n      // (instead of changing width/height directly).\n      // This helps with performance, specifically in iOS15 Safari.\n      setWidthHeight(this.element, 250, 'auto');\n      this.element.style.transformOrigin = '0 0';\n      this.element.style.transform = toTransformString(0, 0, width / 250);\n    } else {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  destroy() {\n    if (this.element.parentNode) {\n      this.element.remove();\n    }\n    this.element = null;\n  }\n}\n\n/**\n * Renders and allows to control a single slide\n */\n\nclass Slide {\n  constructor(data, index, pswp) {\n    this.data = data;\n    this.index = index;\n    this.pswp = pswp;\n    this.isActive = (index === pswp.currIndex);\n    this.currentResolution = 0;\n    this.panAreaSize = {};\n\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\n\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\n\n    this.pswp.dispatch('gettingData', {\n      slide: this,\n      data: this.data,\n      index\n    });\n\n    this.pan = {\n      x: 0,\n      y: 0\n    };\n\n    const ContentClass = this.pswp.getContentClass(this.data, index);\n    this.content = new ContentClass(this.data, pswp, this);\n\n    this.currZoomLevel = 1;\n    this.width = this.content.width;\n    this.height = this.content.height;\n\n    this.bounds = new PanBounds(this);\n\n    this.prevDisplayedWidth = -1;\n    this.prevDisplayedHeight = -1;\n\n    this.pswp.dispatch('slideInit', { slide: this });\n  }\n\n  /**\n   * If this slide is active/current/visible\n   *\n   * @param {Boolean} isActive\n   */\n  setIsActive(isActive) {\n    if (isActive && !this.isActive) {\n      // slide just became active\n      this.activate();\n    } else if (!isActive && this.isActive) {\n      // slide just became non-active\n      this.deactivate();\n    }\n  }\n\n  /**\n   * Appends slide content to DOM\n   */\n  append(holderElement) {\n    this.holderElement = holderElement;\n\n    // Slide appended to DOM\n    if (!this.data) {\n      this.holderElement.innerHTML = '';\n      return;\n    }\n\n    this.calculateSize();\n\n    this.container = createElement('pswp__zoom-wrap');\n    this.container.transformOrigin = '0 0';\n\n    this.load();\n    this.appendHeavy();\n    this.updateContentSize();\n\n    this.holderElement.innerHTML = '';\n    this.holderElement.appendChild(this.container);\n\n    this.zoomAndPanToInitial();\n\n    this.pswp.dispatch('firstZoomPan', { slide: this });\n\n    this.applyCurrentZoomPan();\n\n    this.pswp.dispatch('afterSetContent', { slide: this });\n\n    if (this.isActive) {\n      this.activate();\n    }\n  }\n\n  removePlaceholder() {\n    if (this.placeholder && this.content && !this.content.keepPlaceholder()) {\n      // With delay, as image might be loaded, but not decoded\n      setTimeout(() => {\n        if (this.placeholder) {\n          this.placeholder.destroy();\n          this.placeholder = null;\n        }\n      }, 500);\n    }\n  }\n\n  load() {\n    if (this.usePlaceholder() && !this.placeholder) {\n      const useImagePlaceholder = this.data.msrc && this.isFirstSlide;\n      this.placeholder = new Placeholder(\n        useImagePlaceholder ? this.data.msrc : false,\n        this.container\n      );\n    }\n\n    this.content.load();\n    this.pswp.lazyLoader.addRecent(this.index);\n    this.pswp.dispatch('slideLoad', { slide: this });\n  }\n\n  /**\n   * Append \"heavy\" DOM elements\n   *\n   * This may depend on a type of slide,\n   * but generally these are large images.\n   */\n  appendHeavy() {\n    const { pswp } = this;\n    const appendHeavyNearby = true;\n\n    // Avoid appending heavy elements during animations\n    if (this.heavyAppended\n        || !pswp.opener.isOpen\n        || pswp.mainScroll.isShifted()\n        || (!this.isActive && !appendHeavyNearby)) {\n      return;\n    }\n\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\n      return;\n    }\n\n    this.heavyAppended = true;\n\n    if (this.content.state === LOAD_STATE.ERROR) {\n      this.displayError();\n    } else {\n      this.content.appendTo(this.container);\n      if (this.placeholder) {\n        this.removePlaceholder();\n      }\n    }\n\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\n  }\n\n  /**\n   * Append HTML content to slide container\n   * (usually item.html or error message)\n   *\n   * @param {DOMElement} containerEl\n   * @param {String} html\n   */\n  setSlideHTML(html) {\n    const { container } = this;\n    if (html.tagName) {\n      container.appendChild(html);\n    } else {\n      container.innerHTML = html;\n    }\n  }\n\n  displayError() {\n    const errorElement = this.content.getErrorElement();\n    errorElement.style.position = 'absolute';\n    errorElement.style.left = 0;\n    errorElement.style.top = 0;\n    this.activeErrorElement = errorElement;\n    this.setSlideHTML(errorElement);\n    this.updateContentSize(true);\n  }\n\n  /**\n   * Triggered when this slide is active (selected).\n   *\n   * If it's part of opening/closing transition -\n   * activate() will trigger after the transition is ended.\n   */\n  activate() {\n    this.isActive = true;\n    this.appendHeavy();\n    this.content.activate();\n    this.pswp.dispatch('slideActivate', { slide: this });\n  }\n\n  /**\n   * Triggered when this slide becomes inactive.\n   *\n   * Slide can become inactive only after it was active.\n   */\n  deactivate() {\n    this.isActive = false;\n    this.content.deactivate();\n\n    // reset zoom level\n    this.currentResolution = 0;\n    this.zoomAndPanToInitial();\n    this.applyCurrentZoomPan();\n    this.updateContentSize();\n\n    this.pswp.dispatch('slideDeactivate', { slide: this });\n  }\n\n  /**\n   * The slide should destroy itself, it will never be used again.\n   * (unbind all events and destroy internal components)\n   */\n  destroy() {\n    this.content.destroy();\n    this.pswp.dispatch('slideDestroy', { slide: this });\n  }\n\n  resize() {\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\n      // Keep initial zoom level if it was before the resize,\n      // as well as when this slide is not active\n\n      // Reset position and scale to original state\n      this.calculateSize();\n      this.currentResolution = 0;\n      this.zoomAndPanToInitial();\n      this.applyCurrentZoomPan();\n      this.updateContentSize();\n    } else {\n      // readjust pan position if it's beyond the bounds\n      this.calculateSize();\n      this.bounds.update(this.currZoomLevel);\n      this.panTo(this.pan.x, this.pan.y);\n    }\n  }\n\n\n  /**\n   * Apply size to current slide content,\n   * based on the current resolution and scale.\n   *\n   * @param {Boolean} force if size should be updated even if dimensions weren't changed\n   */\n  updateContentSize(force) {\n    // Use initial zoom level\n    // if resolution is not defined (user didn't zoom yet)\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\n\n    if (!scaleMultiplier) {\n      return;\n    }\n\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\n\n    if (!this.sizeChanged(width, height) && !force) {\n      return;\n    }\n\n    if (this.placeholder) {\n      this.placeholder.setDisplayedSize(width, height);\n    }\n\n    if (this.activeErrorElement) {\n      setWidthHeight(this.activeErrorElement, width, height);\n    }\n\n    this.content.setDisplayedSize(width, height);\n  }\n\n  sizeChanged(width, height) {\n    if (width !== this.prevDisplayedWidth\n        || height !== this.prevDisplayedHeight) {\n      this.prevDisplayedWidth = width;\n      this.prevDisplayedHeight = height;\n      return true;\n    }\n\n    return false;\n  }\n\n  getPlaceholderElement() {\n    if (this.placeholder) {\n      return this.placeholder.element;\n    }\n  }\n\n  /**\n   * Zoom current slide image to...\n   *\n   * @param  {Number} destZoomLevel      Destination zoom level.\n   * @param  {Object|false} centerPoint  Transform origin center point,\n   *                                     or false if viewport center should be used.\n   * @param  {Number} transitionDuration Transition duration, may be set to 0.\n   * @param  {Boolean|null} ignoreBounds Minimum and maximum zoom levels will be ignored.\n   * @return {Boolean|null}              Returns true if animated.\n   */\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\n    const { pswp } = this;\n    if (!this.isZoomable()\n        || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    pswp.dispatch('beforeZoomTo', {\n      destZoomLevel, centerPoint, transitionDuration\n    });\n\n    // stop all pan and zoom transitions\n    pswp.animations.stopAllPan();\n\n    // if (!centerPoint) {\n    //   centerPoint = pswp.getViewportCenterPoint();\n    // }\n\n    const prevZoomLevel = this.currZoomLevel;\n\n    if (!ignoreBounds) {\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\n    }\n\n    // if (transitionDuration === undefined) {\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\n    // }\n\n    this.setZoomLevel(destZoomLevel);\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\n    roundPoint(this.pan);\n\n    const finishTransition = () => {\n      this._setResolution(destZoomLevel);\n      this.applyCurrentZoomPan();\n    };\n\n    if (!transitionDuration) {\n      finishTransition();\n    } else {\n      pswp.animations.startTransition({\n        isPan: true,\n        name: 'zoomTo',\n        target: this.container,\n        transform: this.getCurrentTransform(),\n        onComplete: finishTransition,\n        duration: transitionDuration,\n        easing: pswp.options.easing\n      });\n    }\n  }\n\n  toggleZoom(centerPoint) {\n    this.zoomTo(\n      this.currZoomLevel === this.zoomLevels.initial\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\n      centerPoint,\n      this.pswp.options.zoomAnimationDuration\n    );\n  }\n\n  /**\n   * Updates zoom level property and recalculates new pan bounds,\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\n   *\n   * @param {Number} currZoomLevel\n   */\n  setZoomLevel(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n    this.bounds.update(this.currZoomLevel);\n  }\n\n  /**\n   * Get pan position after zoom at a given `point`.\n   *\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\n   * pan bounds according to the new zoom level.\n   *\n   * @param {String} axis\n   * @param {Object|null} centerPoint point based on which zoom is performed,\n   *                                  usually refers to the current mouse position,\n   *                                  if false - viewport center will be used.\n   * @param {Number|null} prevZoomLevel Zoom level before new zoom was applied.\n   */\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\n    if (totalPanDistance === 0) {\n      return this.bounds.center[axis];\n    }\n\n    if (!point) {\n      point = this.pswp.getViewportCenterPoint();\n    }\n\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\n    return this.bounds.correctPan(\n      axis,\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\n    );\n  }\n\n  /**\n   * Apply pan and keep it within bounds.\n   *\n   * @param {Number} panX\n   * @param {Number} panY\n   */\n  panTo(panX, panY) {\n    this.pan.x = this.bounds.correctPan('x', panX);\n    this.pan.y = this.bounds.correctPan('y', panY);\n    this.applyCurrentZoomPan();\n  }\n\n  /**\n   * If the slide in the current state can be panned by the user\n   */\n  isPannable() {\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\n  }\n\n  /**\n   * If the slide can be zoomed\n   */\n  isZoomable() {\n    return this.width && this.content.isZoomable();\n  }\n\n  usePlaceholder() {\n    return this.content.usePlaceholder();\n  }\n\n  /**\n   * Apply transform and scale based on\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\n   */\n  applyCurrentZoomPan() {\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\n    if (this === this.pswp.currSlide) {\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\n    }\n  }\n\n  zoomAndPanToInitial() {\n    this.currZoomLevel = this.zoomLevels.initial;\n\n    // pan according to the zoom level\n    this.bounds.update(this.currZoomLevel);\n    equalizePoints(this.pan, this.bounds.center);\n    this.pswp.dispatch('initialZoomPan', { slide: this });\n  }\n\n  /**\n   * Set translate and scale based on current resolution\n   *\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} zoom\n   */\n  _applyZoomTransform(x, y, zoom) {\n    zoom /= this.currentResolution || this.zoomLevels.initial;\n    setTransform(this.container, x, y, zoom);\n  }\n\n  calculateSize() {\n    // this.zoomLevels.fit = 1;\n    // this.zoomLevels.vFill = 1;\n    // this.zoomLevels.initial = 1;\n\n    const { pswp } = this;\n\n    equalizePoints(\n      this.panAreaSize,\n      getPanAreaSize(pswp.options, pswp.viewportSize)\n    );\n\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\n\n    pswp.dispatch('calcSlideSize', {\n      slide: this\n    });\n  }\n\n  getCurrentTransform() {\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\n    return toTransformString(this.pan.x, this.pan.y, scale);\n  }\n\n  /**\n   * Set resolution and re-render the image.\n   *\n   * For example, if the real image size is 2000x1500,\n   * and resolution is 0.5 - it will be rendered as 1000x750.\n   *\n   * Image with zoom level 2 and resolution 0.5 is\n   * the same as image with zoom level 1 and resolution 1.\n   *\n   * Used to optimize animations and make\n   * sure that browser renders image in highest quality.\n   * Also used by responsive images to load the correct one.\n   *\n   * @param {Number} newResolution\n   */\n  _setResolution(newResolution) {\n    if (newResolution === this.currentResolution) {\n      return;\n    }\n\n    this.currentResolution = newResolution;\n    this.updateContentSize();\n\n    this.pswp.dispatch('resolutionChanged');\n  }\n}\n\n/**\n * Handles single pointer dragging\n */\n\nconst PAN_END_FRICTION = 0.35;\nconst VERTICAL_DRAG_FRICTION = 0.6;\n\n// 1 corresponds to the third of viewport height\nconst MIN_RATIO_TO_CLOSE = 0.4;\n\n// Minimum speed required to navigate\n// to next or previous slide\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\n\nfunction project(initialVelocity, decelerationRate) {\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\n}\n\nclass DragHandler {\n  constructor(gestures) {\n    this.gestures = gestures;\n    this.pswp = gestures.pswp;\n    this.startPan = {};\n  }\n\n  start() {\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\n    this.pswp.animations.stopAll();\n  }\n\n  change() {\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\n    const { currSlide } = pswp;\n\n    if (dragAxis === 'y'\n        && pswp.options.closeOnVerticalDrag\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\n        && !this.gestures.isMultitouch) {\n      // Handle vertical drag to close\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\n        pswp.applyBgOpacity(bgOpacity);\n        currSlide.applyCurrentZoomPan();\n      }\n    } else {\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\n      if (!mainScrollChanged) {\n        this._panOrMoveMainScroll('y');\n\n        roundPoint(currSlide.pan);\n        currSlide.applyCurrentZoomPan();\n      }\n    }\n  }\n\n  end() {\n    const { pswp, velocity } = this.gestures;\n    const { mainScroll } = pswp;\n    let indexDiff = 0;\n\n    pswp.animations.stopAll();\n\n    // Handle main scroll if it's shifted\n    if (mainScroll.isShifted()) {\n      // Position of the main scroll relative to the viewport\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\n\n      // Ratio between 0 and 1:\n      // 0 - slide is not visible at all,\n      // 0.5 - half of the slide is vicible\n      // 1 - slide is fully visible\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\n\n      // Go next slide.\n      //\n      // - if velocity and its direction is matched\n      //   and we see at least tiny part of the next slide\n      //\n      // - or if we see less than 50% of the current slide\n      //   and velocity is close to 0\n      //\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\n        // Go to next slide\n        indexDiff = 1;\n        velocity.x = Math.min(velocity.x, 0);\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\n        // Go to prev slide\n        indexDiff = -1;\n        velocity.x = Math.max(velocity.x, 0);\n      }\n\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\n    }\n\n    // Restore zoom level\n    if ((pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\n        && this.pswp.options.limitMaxZoom)\n        || this.gestures.isMultitouch) {\n      this.gestures.zoomLevels.correctZoomPan(true);\n    } else {\n      // we run two animations instead of one,\n      // as each axis has own pan boundaries and thus different spring function\n      // (correctZoomPan does not have this functionality,\n      //  it animates all properties with single timing function)\n      this._finishPanGestureForAxis('x');\n      this._finishPanGestureForAxis('y');\n    }\n  }\n\n  _finishPanGestureForAxis(axis) {\n    const { pswp } = this;\n    const { currSlide } = pswp;\n    const { velocity } = this.gestures;\n    const { pan, bounds } = currSlide;\n    const panPos = pan[axis];\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\n\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\n    // Inceasing this number will reduce travel distance\n    const decelerationRate = 0.995; // 0.99\n\n    // Pan position if there is no bounds\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\n\n    if (restoreBgOpacity) {\n      const vDragRatio = this._getVerticalDragRatio(panPos);\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\n\n      // If we are above and moving upwards,\n      // or if we are below and moving downwards\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\n        pswp.close();\n        return;\n      }\n    }\n\n    // Pan position with corrected bounds\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\n\n    // Exit if pan position should not be changed\n    // or if speed it too low\n    if (panPos === correctedPanPosition) {\n      return;\n    }\n\n    // Overshoot if the final position is out of pan bounds\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\n\n    const initialBgOpacity = pswp.bgOpacity;\n    const totalPanDist = correctedPanPosition - panPos;\n\n    pswp.animations.startSpring({\n      name: 'panGesture' + axis,\n      isPan: true,\n      start: panPos,\n      end: correctedPanPosition,\n      velocity: velocity[axis],\n      dampingRatio,\n      onUpdate: (pos) => {\n        // Animate opacity of background relative to Y pan position of an image\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\n          // 0 - start of animation, 1 - end of animation\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\n\n          // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n          pswp.applyBgOpacity(clamp(\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\n            0,\n            1\n          ));\n        }\n\n        pan[axis] = Math.floor(pos);\n        currSlide.applyCurrentZoomPan();\n      },\n    });\n  }\n\n  /**\n   * Update position of the main scroll,\n   * or/and update pan position of the current slide.\n   *\n   * Should return true if it changes (or can change) main scroll.\n   *\n   * @param {String} axis\n   */\n  _panOrMoveMainScroll(axis) {\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\n    const { currSlide, mainScroll } = pswp;\n    const delta = (p1[axis] - prevP1[axis]);\n    const newMainScrollX = mainScroll.x + delta;\n\n    if (!delta) {\n      return;\n    }\n\n    // Always move main scroll if image can not be panned\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\n      mainScroll.moveTo(newMainScrollX, true);\n      return true; // changed main scroll\n    }\n\n    const { bounds } = currSlide;\n    const newPan = currSlide.pan[axis] + delta;\n\n    if (pswp.options.allowPanToNext\n        && dragAxis === 'x'\n        && axis === 'x'\n        && !isMultitouch) {\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\n\n      // Position of the main scroll relative to the viewport\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\n\n      const isLeftToRight = delta > 0;\n      const isRightToLeft = !isLeftToRight;\n\n      if (newPan > bounds.min[axis] && isLeftToRight) {\n        // Panning from left to right, beyond the left edge\n\n        // Wether the image was at minimum pan position (or less)\n        // when this drag gesture started.\n        // Minimum pan position refers to the left edge of the image.\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\n\n        if (wasAtMinPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan);\n          //currSlide.pan[axis] = newPan;\n        }\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\n        // Paning from right to left, beyond the right edge\n\n        // Maximum pan position refers to the right edge of the image.\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\n\n        if (wasAtMaxPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan);\n          //currSlide.pan[axis] = newPan;\n        }\n      } else {\n        // If main scroll is shifted\n        if (mainScrollShiftDiff !== 0) {\n          // If main scroll is shifted right\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          }\n        } else {\n          // We are within pan bounds, so just pan\n          this._setPanWithFriction(axis, newPan);\n        }\n      }\n    } else {\n      if (axis === 'y') {\n        // Do not pan vertically if main scroll is shifted o\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\n          this._setPanWithFriction(axis, newPan);\n        }\n      } else {\n        this._setPanWithFriction(axis, newPan);\n      }\n    }\n  }\n  //\n  // If we move above - the ratio is negative\n  // If we move below the ratio is positive\n\n  /**\n   * Relation between pan Y position and third of viewport height.\n   *\n   * When we are at initial position (center bounds) - the ratio is 0,\n   * if position is shifted upwards - the ratio is negative,\n   * if position is shifted downwards - the ratio is positive.\n   *\n   * @param {Number} panY The current pan Y position.\n   */\n  _getVerticalDragRatio(panY) {\n    return (panY - this.pswp.currSlide.bounds.center.y)\n            / (this.pswp.viewportSize.y / 3);\n  }\n\n  /**\n   * Set pan position of the current slide.\n   * Apply friction if the position is beyond the pan bounds,\n   * or if custom friction is defined.\n   *\n   * @param {String} axis\n   * @param {Number} potentialPan\n   * @param {Number|null} customFriction (0.1 - 1)\n   */\n  _setPanWithFriction(axis, potentialPan, customFriction) {\n    const { pan, bounds } = this.pswp.currSlide;\n    const correctedPan = bounds.correctPan(axis, potentialPan);\n    // If we are out of pan bounds\n    if (correctedPan !== potentialPan || customFriction) {\n      const delta = Math.round(potentialPan - pan[axis]);\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\n    } else {\n      pan[axis] = potentialPan;\n    }\n  }\n}\n\nconst UPPER_ZOOM_FRICTION = 0.05;\nconst LOWER_ZOOM_FRICTION = 0.15;\n\n\n/**\n * Get center point between two points\n *\n * @param {Point} p\n * @param {Point} p1\n * @param {Point} p2\n */\nfunction getZoomPointsCenter(p, p1, p2) {\n  p.x = (p1.x + p2.x) / 2;\n  p.y = (p1.y + p2.y) / 2;\n  return p;\n}\n\nclass ZoomHandler {\n  constructor(gestures) {\n    this.gestures = gestures;\n    this.pswp = this.gestures.pswp;\n    this._startPan = {};\n\n    this._startZoomPoint = {};\n    this._zoomPoint = {};\n  }\n\n  start() {\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\n    this.pswp.animations.stopAllPan();\n    this._wasOverFitZoomLevel = false;\n  }\n\n  change() {\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\n    const { currSlide } = pswp;\n    const minZoomLevel = currSlide.zoomLevels.min;\n    const maxZoomLevel = currSlide.zoomLevels.max;\n\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\n\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\n                      * getDistanceBetween(p1, p2)\n                      * this._startZoomLevel;\n\n    // if (!this.zoomStarted) {\n    //   this.zoomStarted = true;\n    //   pswp.dispatch('zoomGestureStarted');\n    // }\n\n    // slightly over the zoom.fit\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\n      this._wasOverFitZoomLevel = true;\n    }\n\n    if (currZoomLevel < minZoomLevel) {\n      if (pswp.options.pinchToClose\n          && !this._wasOverFitZoomLevel\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\n        // fade out background if zooming out\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\n          pswp.applyBgOpacity(bgOpacity);\n        }\n      } else {\n        // Apply the friction if zoom level is below the min\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\n      }\n    } else if (currZoomLevel > maxZoomLevel) {\n      // Apply the friction if zoom level is above the max\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\n    }\n\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\n\n    currSlide.setZoomLevel(currZoomLevel);\n    currSlide.applyCurrentZoomPan();\n\n\n    //_isZoomingIn = currZoomLevel > _currZoomLevel;\n    //_currZoomLevel = currZoomLevel;\n    //_applyCurrentZoomPan();\n    //_updatePrevPoints();\n  }\n\n  end() {\n    const { pswp } = this;\n    const { currSlide } = pswp;\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\n        && !this._wasOverFitZoomLevel\n        && pswp.options.pinchToClose) {\n      pswp.close();\n    } else {\n      this.correctZoomPan();\n    }\n  }\n\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\n    return this._zoomPoint[axis]\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\n  }\n\n  /**\n   * Correct currZoomLevel and pan if they are\n   * beyond minimum or maximum values.\n   * With animation.\n   *\n   * @param {Boolean} ignoreGesture Wether gesture coordinates should be ignored\n   *                                when calculating destination pan position.\n   */\n  correctZoomPan(ignoreGesture) {\n    const { pswp } = this;\n    const { currSlide } = pswp;\n\n    if (!currSlide.isZoomable()) {\n      return;\n    }\n\n    if (this._zoomPoint.x === undefined) {\n      ignoreGesture = true;\n    }\n\n    const prevZoomLevel = currSlide.currZoomLevel;\n\n    let destinationZoomLevel;\n    let currZoomLevelNeedsChange = true;\n\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\n      destinationZoomLevel = currSlide.zoomLevels.initial;\n      // zoom to min\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\n      destinationZoomLevel = currSlide.zoomLevels.max;\n      // zoom to max\n    } else {\n      currZoomLevelNeedsChange = false;\n      destinationZoomLevel = prevZoomLevel;\n    }\n\n    const initialBgOpacity = pswp.bgOpacity;\n    const restoreBgOpacity = pswp.bgOpacity < 1;\n\n    const initialPan = equalizePoints({}, currSlide.pan);\n    let destinationPan = equalizePoints({}, initialPan);\n\n    if (ignoreGesture) {\n      this._zoomPoint.x = 0;\n      this._zoomPoint.y = 0;\n      this._startZoomPoint.x = 0;\n      this._startZoomPoint.y = 0;\n      this._startZoomLevel = prevZoomLevel;\n      equalizePoints(this._startPan, initialPan);\n    }\n\n    if (currZoomLevelNeedsChange) {\n      destinationPan = {\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\n      };\n    }\n\n    // set zoom level, so pan bounds are updated according to it\n    currSlide.setZoomLevel(destinationZoomLevel);\n\n    destinationPan = {\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\n    };\n\n    // return zoom level and its bounds to initial\n    currSlide.setZoomLevel(prevZoomLevel);\n\n    let panNeedsChange = true;\n    if (pointsEqual(destinationPan, initialPan)) {\n      panNeedsChange = false;\n    }\n\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\n      // update resolution after gesture\n      currSlide._setResolution(destinationZoomLevel);\n      currSlide.applyCurrentZoomPan();\n\n      // nothing to animate\n      return;\n    }\n\n    pswp.animations.stopAllPan();\n\n    pswp.animations.startSpring({\n      isPan: true,\n      start: 0,\n      end: 1000,\n      velocity: 0,\n      dampingRatio: 1,\n      naturalFrequency: 40,\n      onUpdate: (now) => {\n        now /= 1000; // 0 - start, 1 - end\n\n        if (panNeedsChange || currZoomLevelNeedsChange) {\n          if (panNeedsChange) {\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\n          }\n\n          if (currZoomLevelNeedsChange) {\n            const newZoomLevel = prevZoomLevel\n                        + (destinationZoomLevel - prevZoomLevel) * now;\n            currSlide.setZoomLevel(newZoomLevel);\n          }\n\n          currSlide.applyCurrentZoomPan();\n        }\n\n        // Restore background opacity\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\n          // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n          pswp.applyBgOpacity(clamp(\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\n          ));\n        }\n      },\n      onComplete: () => {\n        // update resolution after transition ends\n        currSlide._setResolution(destinationZoomLevel);\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n}\n\n/**\n * Tap, double-tap handler.\n */\n\n/**\n * Whether the tap was performed on the main slide\n * (rather than controls or caption).\n *\n * @param {Event} event\n */\nfunction didTapOnMainContent(event) {\n  return !!(event.target.closest('.pswp__container'));\n}\n\nclass TapHandler {\n  constructor(gestures) {\n    this.gestures = gestures;\n  }\n\n\n  click(point, originalEvent) {\n    const targetClassList = originalEvent.target.classList;\n    const isImageClick = targetClassList.contains('pswp__img');\n    const isBackgroundClick = targetClassList.contains('pswp__item')\n                              || targetClassList.contains('pswp__zoom-wrap');\n\n    if (isImageClick) {\n      this._doClickOrTapAction('imageClick', point, originalEvent);\n    } else if (isBackgroundClick) {\n      this._doClickOrTapAction('bgClick', point, originalEvent);\n    }\n  }\n\n  tap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('tap', point, originalEvent);\n    }\n  }\n\n  doubleTap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\n    }\n  }\n\n  _doClickOrTapAction(actionName, point, originalEvent) {\n    const { pswp } = this.gestures;\n    const { currSlide } = pswp;\n    const optionValue = pswp.options[actionName + 'Action'];\n\n    if (pswp.dispatch(actionName + 'Action', { point, originalEvent }).defaultPrevented) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      optionValue.call(pswp, point, originalEvent);\n      return;\n    }\n\n    switch (optionValue) {\n      case 'close':\n      case 'next':\n        pswp[optionValue]();\n        break;\n      case 'zoom':\n        currSlide.toggleZoom(point);\n        break;\n      case 'zoom-or-close':\n        // by default click zooms current image,\n        // if it can not be zoomed - gallery will be closed\n        if (currSlide.isZoomable()\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\n          currSlide.toggleZoom(point);\n        } else if (pswp.options.clickToCloseNonZoomable) {\n          pswp.close();\n        }\n        break;\n      case 'toggle-controls':\n        this.gestures.pswp.template.classList.toggle('pswp--ui-visible');\n        // if (_controlsVisible) {\n        //   _ui.hideControls();\n        // } else {\n        //   _ui.showControls();\n        // }\n        break;\n    }\n  }\n}\n\n/**\n * Gestures class bind touch, pointer or mouse events\n * and emits drag to drag-handler and zoom events zoom-handler.\n *\n * Drag and zoom events are emited in requestAnimationFrame,\n * and only when one of pointers was actually changed.\n */\n\n// How far should user should drag\n// until we can determine that the gesture is swipe and its direction\nconst AXIS_SWIPE_HYSTERISIS = 10;\n//const PAN_END_FRICTION = 0.35;\n\nconst DOUBLE_TAP_DELAY = 300; // ms\nconst MIN_TAP_DISTANCE = 25; // px\n\nclass Gestures {\n  constructor(pswp) {\n    this.pswp = pswp;\n\n\n    // point objects are defined once and reused\n    // PhotoSwipe keeps track only of two pointers, others are ignored\n    this.p1 = {}; // the first pressed pointer\n    this.p2 = {}; // the second pressed pointer\n    this.prevP1 = {};\n    this.prevP2 = {};\n    this.startP1 = {};\n    this.startP2 = {};\n    this.velocity = {};\n\n    this._lastStartP1 = {};\n    this._intervalP1 = {};\n    this._numActivePoints = 0;\n    this._ongoingPointers = [];\n\n    this._touchEventEnabled = 'ontouchstart' in window;\n    this._pointerEventEnabled = !!(window.PointerEvent);\n    this.supportsTouch = this._touchEventEnabled\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\n\n    if (!this.supportsTouch) {\n      // disable pan to next slide for non-touch devices\n      pswp.options.allowPanToNext = false;\n    }\n\n    this.drag = new DragHandler(this);\n    this.zoomLevels = new ZoomHandler(this);\n    this.tapHandler = new TapHandler(this);\n\n    pswp.on('bindEvents', () => {\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\n\n      if (this._pointerEventEnabled) {\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\n      } else if (this._touchEventEnabled) {\n        this._bindEvents('touch', 'start', 'end', 'cancel');\n\n        // In previous versions we also bound mouse event here,\n        // in case device supports both touch and mouse events,\n        // but newer versions of browsers now support PointerEvent.\n\n        // on iOS10 if you bind touchmove/end after touchstart,\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\n        // preventDefault will have no effect on touchmove and touchend.\n        // Unless you bind it previously.\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\n      } else {\n        this._bindEvents('mouse', 'down', 'up');\n      }\n    });\n  }\n\n  _bindEvents(pref, down, up, cancel) {\n    const { pswp } = this;\n    const { events } = pswp;\n\n    const cancelEvent = cancel ? pref + cancel : '';\n\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\n    events.add(window, pref + up, this.onPointerUp.bind(this));\n    if (cancelEvent) {\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\n    }\n  }\n\n\n  onPointerDown(e) {\n    // We do not call preventDefault for touch events\n    // to allow browser to show native dialog on longpress\n    // (the one that allows to save image or open it in new tab).\n    //\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\n    let isMousePointer;\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\n      isMousePointer = true;\n    }\n\n    // Allow dragging only via left mouse button.\n    // http://www.quirksmode.org/js/events_properties.html\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\n    if (isMousePointer && e.button > 0) {\n      return;\n    }\n\n    const { pswp } = this;\n\n    // if PhotoSwipe is opening or closing\n    if (!pswp.opener.isOpen) {\n      e.preventDefault();\n      return;\n    }\n\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\n      return;\n    }\n\n    if (isMousePointer) {\n      pswp.mouseDetected();\n\n      // preventDefault mouse event to prevent\n      // browser image drag feature\n      this._preventPointerEventBehaviour(e);\n    }\n\n    pswp.animations.stopAll();\n\n    this._updatePoints(e, 'down');\n\n    this.pointerDown = true;\n\n    if (this._numActivePoints === 1) {\n      this.dragAxis = null;\n      // we need to store initial point to determine the main axis,\n      // drag is activated only after the axis is determined\n      equalizePoints(this.startP1, this.p1);\n    }\n\n    if (this._numActivePoints > 1) {\n      // Tap or double tap should not trigger if more than one pointer\n      this._clearTapTimer();\n      this.isMultitouch = true;\n    } else {\n      this.isMultitouch = false;\n    }\n  }\n\n  onPointerMove(e) {\n    e.preventDefault(); // always preventDefault move event\n\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'move');\n\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 1 && !this.isDragging) {\n      if (!this.dragAxis) {\n        this._calculateDragDirection();\n      }\n\n      // Drag axis was detected, emit drag.start\n      if (this.dragAxis && !this.isDragging) {\n        if (this.isZooming) {\n          this.isZooming = false;\n          this.zoomLevels.end();\n        }\n\n        this.isDragging = true;\n        this._clearTapTimer(); // Tap can not trigger after drag\n\n        // Adjust starting point\n        this._updateStartPoints();\n        this._intervalTime = Date.now();\n        //this._startTime = this._intervalTime;\n        this._velocityCalculated = false;\n        equalizePoints(this._intervalP1, this.p1);\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        this.drag.start();\n\n        this._rafStopLoop();\n        this._rafRenderLoop();\n      }\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\n      this._finishDrag();\n\n      this.isZooming = true;\n\n      // Adjust starting points\n      this._updateStartPoints();\n\n      this.zoomLevels.start();\n\n      this._rafStopLoop();\n      this._rafRenderLoop();\n    }\n  }\n\n  _finishDrag() {\n    if (this.isDragging) {\n      this.isDragging = false;\n\n      // Try to calculate velocity,\n      // if it wasn't calculated yet in drag.change\n      if (!this._velocityCalculated) {\n        this._updateVelocity(true);\n      }\n\n      this.drag.end();\n      this.dragAxis = null;\n    }\n  }\n\n\n  onPointerUp(e) {\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'up');\n\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 0) {\n      this.pointerDown = false;\n      this._rafStopLoop();\n\n      if (this.isDragging) {\n        this._finishDrag();\n      } else if (!this.isZooming && !this.isMultitouch) {\n        //this.zoomLevels.correctZoomPan();\n        this._finishTap(e);\n      }\n    }\n\n    if (this._numActivePoints < 2 && this.isZooming) {\n      this.isZooming = false;\n      this.zoomLevels.end();\n\n      if (this._numActivePoints === 1) {\n        // Since we have 1 point left, we need to reinitiate drag\n        this.dragAxis = null;\n        this._updateStartPoints();\n      }\n    }\n  }\n\n\n  _rafRenderLoop() {\n    if (this.isDragging || this.isZooming) {\n      this._updateVelocity();\n\n      if (this.isDragging) {\n        // make sure that pointer moved since the last update\n        if (!pointsEqual(this.p1, this.prevP1)) {\n          this.drag.change();\n        }\n      } else /* if (this.isZooming) */ {\n        if (!pointsEqual(this.p1, this.prevP1)\n            || !pointsEqual(this.p2, this.prevP2)) {\n          this.zoomLevels.change();\n        }\n      }\n\n      this._updatePrevPoints();\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\n    }\n  }\n\n  /**\n   * Update velocity at 50ms interval\n   */\n  _updateVelocity(force) {\n    const time = Date.now();\n    const duration = time - this._intervalTime;\n\n    if (duration < 50 && !force) {\n      return;\n    }\n\n\n    this.velocity.x = this._getVelocity('x', duration);\n    this.velocity.y = this._getVelocity('y', duration);\n\n    this._intervalTime = time;\n    equalizePoints(this._intervalP1, this.p1);\n    this._velocityCalculated = true;\n  }\n\n  _finishTap(e) {\n    const { mainScroll } = this.pswp;\n\n    // Do not trigger tap events if main scroll is shifted\n    if (mainScroll.isShifted()) {\n      // restore main scroll position\n      // (usually happens if stopped in the middle of animation)\n      mainScroll.moveIndexBy(0, true);\n      return;\n    }\n\n    // Do not trigger tap for touchcancel or pointercancel\n    if (e.type.indexOf('cancel') > 0) {\n      return;\n    }\n\n    // Trigger click instead of tap for mouse events\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\n      this.tapHandler.click(this.startP1, e);\n      return;\n    }\n\n    // Disable delay if there is no doubleTapAction\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\n\n    // If tapTimer is defined - we tapped recently,\n    // check if the current tap is close to the previous one,\n    // if yes - trigger double tap\n    if (this._tapTimer) {\n      this._clearTapTimer();\n      // Check if two taps were more or less on the same place\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\n        this.tapHandler.doubleTap(this.startP1, e);\n      }\n    } else {\n      equalizePoints(this._lastStartP1, this.startP1);\n      this._tapTimer = setTimeout(() => {\n        this.tapHandler.tap(this.startP1, e);\n        this._clearTapTimer();\n      }, tapDelay);\n    }\n  }\n\n  _clearTapTimer() {\n    if (this._tapTimer) {\n      clearTimeout(this._tapTimer);\n      this._tapTimer = null;\n    }\n  }\n\n  /**\n   * Get velocity for axis\n   *\n   * @param {Number} axis\n   * @param {Number} duration\n   */\n  _getVelocity(axis, duration) {\n    // displacement is like distance, but can be negative.\n    const displacement = this.p1[axis] - this._intervalP1[axis];\n\n    if (Math.abs(displacement) > 1 && duration > 5) {\n      return displacement / duration;\n    }\n\n    return 0;\n  }\n\n  _rafStopLoop() {\n    if (this.raf) {\n      cancelAnimationFrame(this.raf);\n      this.raf = null;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _preventPointerEventBehaviour(e) {\n    // TODO find a way to disable e.preventDefault on some elements\n    //      via event or some class or something\n    e.preventDefault();\n    return true;\n  }\n\n  /**\n   * Parses and normalizes points from the touch, mouse or pointer event.\n   * Updates p1 and p2.\n   *\n   * @param {Event} e\n   * @param {String} pointerType Normalized pointer type ('up', 'down' or 'move')\n   */\n  _updatePoints(e, pointerType) {\n    if (this._pointerEventEnabled) {\n      // Try to find the current pointer in ongoing pointers by its ID\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\n        return ongoingPoiner.id === e.pointerId;\n      });\n\n      if (pointerType === 'up' && pointerIndex > -1) {\n        // release the pointer - remove it from ongoing\n        this._ongoingPointers.splice(pointerIndex, 1);\n      } else if (pointerType === 'down' && pointerIndex === -1) {\n        // add new pointer\n        this._ongoingPointers.push(this._convertEventPosToPoint(e, {}));\n      } else if (pointerIndex > -1) {\n        // update existing pointer\n        this._convertEventPosToPoint(e, this._ongoingPointers[pointerIndex]);\n      }\n\n      this._numActivePoints = this._ongoingPointers.length;\n\n      // update points that PhotoSwipe uses\n      // to calculate position and scale\n      if (this._numActivePoints > 0) {\n        equalizePoints(this.p1, this._ongoingPointers[0]);\n      }\n\n      if (this._numActivePoints > 1) {\n        equalizePoints(this.p2, this._ongoingPointers[1]);\n      }\n    } else {\n      this._numActivePoints = 0;\n      if (e.type.indexOf('touch') > -1) {\n        // Touch Event\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n        if (e.touches && e.touches.length > 0) {\n          this._convertEventPosToPoint(e.touches[0], this.p1);\n          this._numActivePoints++;\n          if (e.touches.length > 1) {\n            this._convertEventPosToPoint(e.touches[1], this.p2);\n            this._numActivePoints++;\n          }\n        }\n      } else {\n        // Mouse Event\n        this._convertEventPosToPoint(e, this.p1);\n        if (pointerType === 'up') {\n          // clear all points on mouseup\n          this._numActivePoints = 0;\n        } else {\n          this._numActivePoints++;\n        }\n      }\n    }\n  }\n\n  // update points that were used during previous rAF tick\n  _updatePrevPoints() {\n    equalizePoints(this.prevP1, this.p1);\n    equalizePoints(this.prevP2, this.p2);\n  }\n\n  // update points at the start of gesture\n  _updateStartPoints() {\n    equalizePoints(this.startP1, this.p1);\n    equalizePoints(this.startP2, this.p2);\n    this._updatePrevPoints();\n  }\n\n  _calculateDragDirection() {\n    if (this.pswp.mainScroll.isShifted()) {\n      // if main scroll position is shifted – direction is always horizontal\n      this.dragAxis = 'x';\n    } else {\n      // calculate delta of the last touchmove tick\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\n\n      if (diff !== 0) {\n        // check if pointer was shifted horizontally or vertically\n        const axisToCheck = diff > 0 ? 'x' : 'y';\n\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\n          this.dragAxis = axisToCheck;\n        }\n      }\n    }\n  }\n\n  /**\n   * Converts touch, pointer or mouse event\n   * to PhotoSwipe point.\n   *\n   * @param {Event} e\n   * @param {Point} p\n   */\n  _convertEventPosToPoint(e, p) {\n    p.x = e.pageX - this.pswp.offset.x;\n    p.y = e.pageY - this.pswp.offset.y;\n\n    // e.pointerId can be zero\n    if (e.pointerId !== undefined) {\n      p.id = e.pointerId;\n    } else if (e.identifier !== undefined) {\n      p.id = e.identifier;\n    }\n\n    return p;\n  }\n\n  _onClick(e) {\n    // Do not allow click event to pass through after drag\n    if (this.pswp.mainScroll.isShifted()) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n}\n\n/**\n * Handles movement of the main scrolling container\n * (for example, it repositions when user swipes left or right).\n *\n * Also stores its state.\n */\n\nconst MAIN_SCROLL_END_FRICTION = 0.35;\n\n\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\n\nclass MainScroll {\n  /**\n   * @param {PhotoSwipe} pswp\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.x = 0;\n\n    this.resetPosition();\n  }\n\n  /**\n   * Position the scroller and slide containers\n   * according to viewport size.\n   *\n   * @param {Boolean} resizeSlides Whether slides content should resized\n   */\n  resize(resizeSlides) {\n    const { pswp } = this;\n    const newSlideWidth = Math.round(\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\n    );\n    // Mobile browsers might trigger a resize event during a gesture.\n    // (due to toolbar appearing or hiding).\n    // Avoid re-adjusting main scroll position if width wasn't changed\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\n\n    if (slideWidthChanged) {\n      this.slideWidth = newSlideWidth;\n      this.moveTo(this.getCurrSlideX());\n    }\n\n    this.itemHolders.forEach((itemHolder, index) => {\n      if (slideWidthChanged) {\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\n                                    * this.slideWidth);\n      }\n\n      if (resizeSlides && itemHolder.slide) {\n        itemHolder.slide.resize();\n      }\n    });\n  }\n\n  /**\n   * Reset X position of the main scroller to zero\n   */\n  resetPosition() {\n    // Position on the main scroller (offset)\n    // it is independent from slide index\n    this._currPositionIndex = 0;\n    this._prevPositionIndex = 0;\n\n    // This will force recalculation of size on next resize()\n    this.slideWidth = 0;\n\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\n    this._containerShiftIndex = -1;\n  }\n\n  /**\n   * Create and append array of three items\n   * that hold data about slides in DOM\n   */\n  appendHolders() {\n    this.itemHolders = [];\n\n    // append our three slide holders -\n    // previous, current, and next\n    for (let i = 0; i < 3; i++) {\n      const el = createElement('pswp__item', false, this.pswp.container);\n\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\n      el.style.display = (i === 1) ? 'block' : 'none';\n\n      this.itemHolders.push({\n        el,\n        //index: -1\n      });\n    }\n  }\n\n  /**\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\n   */\n  canBeSwiped() {\n    return this.pswp.getNumItems() > 1;\n  }\n\n  /**\n   * Move main scroll by X amount of slides.\n   * For example:\n   *   `-1` will move to the previous slide,\n   *    `0` will reset the scroll position of the current slide,\n   *    `3` will move three slides forward\n   *\n   * If loop option is enabled - index will be automatically looped too,\n   * (for example `-1` will move to the last slide of the gallery).\n   *\n   * @param {Integer} diff\n   * @returns {Boolean} whether index was changed or not\n   */\n  moveIndexBy(diff, animate, velocityX) {\n    const { pswp } = this;\n    let newIndex = pswp.potentialIndex + diff;\n\n    if (pswp.options.loop) {\n      newIndex = pswp.getLoopedIndex(newIndex);\n    } else {\n      if (newIndex < 0) {\n        newIndex = 0;\n      } else if (newIndex >= pswp.getNumItems()) {\n        newIndex = pswp.getNumItems() - 1;\n      }\n      diff = newIndex - pswp.potentialIndex;\n    }\n\n    pswp.potentialIndex = newIndex;\n    this._currPositionIndex -= diff;\n\n    pswp.animations.stopMainScroll();\n\n    const destinationX = this.getCurrSlideX();\n    if (!animate) {\n      this.moveTo(destinationX);\n      this.updateCurrItem();\n    } else {\n      pswp.animations.startSpring({\n        isMainScroll: true,\n        start: this.x,\n        end: destinationX,\n        velocity: velocityX || 0,\n        naturalFrequency: 30,\n        dampingRatio: 1, //0.7,\n        onUpdate: (x) => {\n          this.moveTo(x);\n        },\n        onComplete: () => {\n          this.updateCurrItem();\n          pswp.appendHeavy();\n        }\n      });\n\n      // Force-append new slides during transition\n      // if difference between slides is more than 1\n      if (Math.abs(pswp.potentialIndex - pswp.currIndex) > 1) {\n        this.updateCurrItem();\n      }\n    }\n\n    if (diff) {\n      return true;\n    }\n  }\n\n  /**\n   * X position of the main scroll for the current slide\n   * (ignores position during dragging)\n   */\n  getCurrSlideX() {\n    return this.slideWidth * this._currPositionIndex;\n  }\n\n  /**\n   * Whether scroll position is shifted.\n   * For example, it will return true if the scroll is being dragged or animated.\n   */\n  isShifted() {\n    return this.x !== this.getCurrSlideX();\n  }\n\n  /**\n   * Update slides X positions and set their content\n   */\n  updateCurrItem() {\n    const { pswp } = this;\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\n\n    if (!positionDifference) {\n      return;\n    }\n\n    this._prevPositionIndex = this._currPositionIndex;\n\n    pswp.currIndex = pswp.potentialIndex;\n\n    let diffAbs = Math.abs(positionDifference);\n    let tempHolder;\n\n    if (diffAbs >= 3) {\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\n      diffAbs = 3;\n    }\n\n    for (let i = 0; i < diffAbs; i++) {\n      if (positionDifference > 0) {\n        tempHolder = this.itemHolders.shift();\n        this.itemHolders[2] = tempHolder; // move first to last\n\n        this._containerShiftIndex++;\n\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\n\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\n      } else {\n        tempHolder = this.itemHolders.pop();\n        this.itemHolders.unshift(tempHolder); // move last to first\n\n        this._containerShiftIndex--;\n\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\n\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\n      }\n    }\n\n    // Reset transfrom every 50ish navigations in one direction.\n    //\n    // Otherwise transform will keep growing indefinitely,\n    // which might cause issues as browsers have a maximum transform limit.\n    // I wasn't able to reach it, but just to be safe.\n    // This should not cause noticable lag.\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\n      this.resetPosition();\n      this.resize();\n    }\n\n    // Pan transition might be running (and consntantly updating pan position)\n    pswp.animations.stopAllPan();\n\n    this.itemHolders.forEach((itemHolder, i) => {\n      if (itemHolder.slide) {\n        // Slide in the 2nd holder is always active\n        itemHolder.slide.setIsActive(i === 1);\n      }\n    });\n\n    pswp.currSlide = this.itemHolders[1].slide;\n    pswp.lazyLoader.update(positionDifference);\n\n    pswp.currSlide.applyCurrentZoomPan();\n    pswp.dispatch('change');\n  }\n\n  /**\n   * Move the X position of the main scroll container\n   *\n   * @param {Number} x\n   * @param {Boolean} dragging\n   */\n  moveTo(x, dragging) {\n    let newSlideIndexOffset;\n    let delta;\n\n    if (!this.pswp.options.loop && dragging) {\n      // Apply friction\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\n      newSlideIndexOffset += this.pswp.currIndex;\n      delta = Math.round(x - this.x);\n\n      if ((newSlideIndexOffset < 0 && delta > 0)\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\n      }\n    }\n\n    this.x = x;\n    setTransform(this.pswp.container, x);\n\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\n  }\n}\n\n/**\n *\n * keyboard.js\n *\n * - Manages keyboard shortcuts.\n * - Heps trap focus within photoswipe.\n *\n */\n\nclass Keyboard {\n  constructor(pswp) {\n    this.pswp = pswp;\n\n    pswp.on('bindEvents', () => {\n      // Dialog was likely opened by keyboard if initial point is not defined\n      if (!pswp.options.initialPointerPos) {\n        // focus causes layout,\n        // which causes lag during the animation,\n        // that's why we delay it until the opener transition ends\n        this._focusRoot();\n      }\n\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\n    });\n\n    const lastActiveElement = document.activeElement;\n    pswp.on('destroy', () => {\n      if (pswp.options.returnFocus\n          && lastActiveElement\n          && this._wasFocused) {\n        lastActiveElement.focus();\n      }\n    });\n  }\n\n  _focusRoot() {\n    if (!this._wasFocused) {\n      this.pswp.template.focus();\n      this._wasFocused = true;\n    }\n  }\n\n  _onKeyDown(e) {\n    const { pswp } = this;\n\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\n      return;\n    }\n\n    if (specialKeyUsed(e)) {\n      // don't do anything if special key pressed\n      // to prevent from overriding default browser actions\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\n      return;\n    }\n\n    let keydownAction;\n    let axis;\n    let isForward;\n\n    switch (e.keyCode) {\n      case 27: // esc\n        if (pswp.options.escKey) {\n          keydownAction = 'close';\n        }\n        break;\n      case 90: // z key\n        keydownAction = 'toggleZoom';\n        break;\n      case 37: // left\n        axis = 'x';\n        break;\n      case 38: // top\n        axis = 'y';\n        break;\n      case 39: // right\n        axis = 'x';\n        isForward = true;\n        break;\n      case 40: // bottom\n        isForward = true;\n        axis = 'y';\n        break;\n      case 9: // tab\n        this._focusRoot();\n        break;\n    }\n\n    // if left/right/top/bottom key\n    if (axis) {\n      // prevent page scroll\n      e.preventDefault();\n\n      const { currSlide } = pswp;\n\n      if (pswp.options.arrowKeys\n          && axis === 'x'\n          && pswp.getNumItems() > 1) {\n        keydownAction = isForward ? 'next' : 'prev';\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\n        // up/down arrow keys pan the image vertically\n        // left/right arrow keys pan horizontally.\n        // Unless there is only one image,\n        // or arrowKeys option is disabled\n        currSlide.pan[axis] += isForward ? -80 : 80;\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\n      }\n    }\n\n    if (keydownAction) {\n      e.preventDefault();\n      pswp[keydownAction]();\n    }\n  }\n\n  /**\n   * Trap focus inside photoswipe\n   *\n   * @param {Event} e\n   */\n  _onFocusIn(e) {\n    const { template } = this.pswp;\n    if (document !== e.target\n        && template !== e.target\n        && !template.contains(e.target)) {\n      // focus root element\n      template.focus();\n    }\n  }\n}\n\n/**\n * Runs CSS transition.\n */\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\n\nclass CSSAnimation {\n  // onComplete can be unpredictable, be careful about current state\n  constructor(props) {\n    this.props = props;\n    const {\n      target,\n      onComplete,\n      transform,\n      // opacity\n    } = props;\n\n    let {\n      duration,\n      easing,\n    } = props;\n\n    // support only transform and opacity\n    const prop = transform ? 'transform' : 'opacity';\n    const propValue = props[prop];\n\n    this._target = target;\n    this._onComplete = onComplete;\n\n    duration = duration || 333;\n    easing = easing || DEFAULT_EASING;\n\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\n\n    // Using timeout hack to make sure that animation\n    // starts even if the animated property was changed recently,\n    // otherwise transitionend might not fire or transiton won't start.\n    // https://drafts.csswg.org/css-transitions/#starting\n    //\n    // ¯\\_(ツ)_/¯\n    this._firstFrameTimeout = setTimeout(() => {\n      setTransitionStyle(target, prop, duration, easing);\n      this._firstFrameTimeout = setTimeout(() => {\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\n        target.style[prop] = propValue;\n      }, 30); // Do not reduce this number\n    }, 0);\n  }\n\n  _onTransitionEnd(e) {\n    if (e.target === this._target) {\n      this._finalizeAnimation();\n    }\n  }\n\n  _finalizeAnimation() {\n    if (!this._finished) {\n      this._finished = true;\n      this.onFinish();\n      if (this._onComplete) {\n        this._onComplete();\n      }\n    }\n  }\n\n  // Destroy is called automatically onFinish\n  destroy() {\n    if (this._firstFrameTimeout) {\n      clearTimeout(this._firstFrameTimeout);\n    }\n    removeTransitionStyle(this._target);\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\n    if (!this._finished) {\n      this._finalizeAnimation();\n    }\n  }\n}\n\n/**\n * Spring easing helper\n */\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\nconst DEFAULT_DAMPING_RATIO = 0.75;\n\nclass SpringEaser {\n  /**\n   * @param {Number} initialVelocity Initial velocity, px per ms.\n   *\n   * @param {Number} dampingRatio Determines how bouncy animation will be.\n   *                              From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\n   *                              \"overshoot\" refers to part of animation that\n   *                              goes beyond the final value.\n   *\n   * @param {Number} naturalFrequency Determines how fast animation will slow down.\n   *                                  The higher value - the stiffer the transition will be,\n   *                                  and the faster it will slow down.\n   *                                  Recommended value from 10 to 50\n   */\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\n\n    // https://en.wikipedia.org/wiki/Damping_ratio\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\n\n    // https://en.wikipedia.org/wiki/Natural_frequency\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\n\n    if (this._dampingRatio < 1) {\n      this._dampedFrequency = this._naturalFrequency\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\n    }\n  }\n\n  /**\n   * @param {Number} deltaPosition Difference between current and end position of the animation\n   * @param {Number} deltaTime Frame duration in milliseconds\n   *\n   * @returns {Number} Displacement, relative to the end position.\n   */\n  easeFrame(deltaPosition, deltaTime) {\n    // Inspired by Apple Webkit and Android spring function implementation\n    // https://en.wikipedia.org/wiki/Oscillation\n    // https://en.wikipedia.org/wiki/Damping_ratio\n    // we ignore mass (assume that it's 1kg)\n\n    let displacement = 0;\n    let coeff;\n\n    deltaTime /= 1000;\n\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\n\n    if (this._dampingRatio === 1) {\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\n\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\n\n      this.velocity = displacement\n                        * (-this._naturalFrequency) + coeff\n                        * naturalDumpingPow;\n    } else if (this._dampingRatio < 1) {\n      coeff = (1 / this._dampedFrequency)\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\n\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\n\n      displacement = naturalDumpingPow\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\n\n      this.velocity = displacement\n                        * (-this._naturalFrequency)\n                        * this._dampingRatio\n                        + naturalDumpingPow\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\n                        + this._dampedFrequency * coeff * dumpedFCos);\n    }\n\n    // Overdamped (>1) damping ratio is not supported\n\n    return displacement;\n  }\n}\n\nclass SpringAnimation {\n  constructor(props) {\n    this.props = props;\n\n    const {\n      start,\n      end,\n      velocity,\n      onUpdate,\n      onComplete,\n      onFinish,\n      dampingRatio,\n      naturalFrequency\n    } = props;\n\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\n    let prevTime = Date.now();\n    let deltaPosition = start - end;\n\n    this._onFinish = onFinish;\n\n    const animationLoop = () => {\n      if (this._raf) {\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\n\n        // Stop the animation if velocity is low and position is close to end\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\n          // Finalize the animation\n          onUpdate(end);\n          if (onComplete) {\n            onComplete();\n          }\n          this.onFinish();\n        } else {\n          prevTime = Date.now();\n          onUpdate(deltaPosition + end);\n          this._raf = requestAnimationFrame(animationLoop);\n        }\n      }\n    };\n\n    this._raf = requestAnimationFrame(animationLoop);\n  }\n\n  // Destroy is called automatically onFinish\n  destroy() {\n    if (this._raf >= 0) {\n      cancelAnimationFrame(this._raf);\n    }\n    this._raf = null;\n  }\n}\n\n/**\n * Manages animations\n */\n\nclass Animations {\n  constructor() {\n    this.activeAnimations = [];\n  }\n\n  startSpring(props) {\n    this._start(props, true);\n  }\n\n  startTransition(props) {\n    this._start(props);\n  }\n\n  _start(props, isSpring) {\n    // if (!props.name) {\n    //   props.name = this._uid++;\n    // }\n\n    // const { name } = props;\n\n    // if (!name || this.activeAnimations[name]) {\n    //   // Animation already running or no name provided\n    //   return;\n    // }\n\n    let animation;\n    if (isSpring) {\n      animation = new SpringAnimation(props);\n    } else {\n      animation = new CSSAnimation(props);\n    }\n\n    this.activeAnimations.push(animation);\n    animation.onFinish = () => this.stop(animation);\n\n    return animation;\n  }\n\n  stop(animation) {\n    animation.destroy();\n    const index = this.activeAnimations.indexOf(animation);\n    if (index > -1) {\n      this.activeAnimations.splice(index, 1);\n    }\n  }\n\n  stopAll() { // _stopAllAnimations\n    this.activeAnimations.forEach((animation) => {\n      animation.destroy();\n    });\n    this.activeAnimations = [];\n  }\n\n  /**\n   * Stop all pan or zoom transitions\n   */\n  stopAllPan() {\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\n      if (animation.props.isPan) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  stopMainScroll() {\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\n      if (animation.props.isMainScroll) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  /**\n   * Returns true if main scroll transition is running\n   */\n  // isMainScrollRunning() {\n  //   return this.activeAnimations.some((animation) => {\n  //     return animation.props.isMainScroll;\n  //   });\n  // }\n\n  /**\n   * Returns true if any pan or zoom transition is running\n   */\n  isPanRunning() {\n    return this.activeAnimations.some((animation) => {\n      return animation.props.isPan;\n    });\n  }\n}\n\n/**\n * Handles scroll wheel.\n * Can pan and zoom current slide image.\n */\nclass ScrollWheel {\n  constructor(pswp) {\n    this.pswp = pswp;\n    pswp.events.add(pswp.template, 'wheel', this._onWheel.bind(this));\n  }\n\n  _onWheel(e) {\n    e.preventDefault();\n    const { currSlide } = this.pswp;\n    let { deltaX, deltaY } = e;\n\n    if (!currSlide) {\n      return;\n    }\n\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\n      return;\n    }\n\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\n      // zoom\n      if (currSlide.isZoomable()) {\n        let zoomFactor = -deltaY;\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\n          zoomFactor *= 0.05;\n        } else {\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\n        }\n        zoomFactor = 2 ** zoomFactor;\n\n        if (this.pswp.options.getWheelZoomFactorFn) {\n          zoomFactor = this.pswp.options.getWheelZoomFactorFn(e, this.pswp);\n        }\n\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\n        currSlide.zoomTo(destZoomLevel, {\n          x: e.clientX,\n          y: e.clientY\n        });\n      }\n    } else {\n      // pan\n      if (currSlide.isPannable()) {\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\n          // 18 - average line height\n          deltaX *= 18;\n          deltaY *= 18;\n        }\n\n        currSlide.panTo(\n          currSlide.pan.x - deltaX,\n          currSlide.pan.y - deltaY\n        );\n      }\n    }\n  }\n}\n\nfunction addButtonHTML(htmlData) {\n  if (typeof htmlData === 'string') {\n    // Allow developers to provide full svg,\n    // For example:\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\n    //   <path d=\"...\" />\n    //   <circle ... />\n    // </svg>\n    // Can also be any HTML string.\n    return htmlData;\n  }\n\n  if (!htmlData || !htmlData.isCustomSVG) {\n    return '';\n  }\n\n  const svgData = htmlData;\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\n  out = out.split('%d').join(svgData.size || 32); // replace all %d with size\n\n  // Icons may contain outline/shadow,\n  // to make it we \"clone\" base icon shape and add border to it.\n  // Icon itself and border are styled via CSS.\n  //\n  // Property shadowID defines ID of element that should be cloned.\n  if (svgData.outlineID) {\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\n  }\n\n  out += svgData.inner;\n\n  out += '</svg>';\n\n  return out;\n}\n\nclass UIElement {\n  constructor(pswp, data) {\n    const name = data.name || data.class;\n    let elementHTML = data.html;\n\n    if (pswp.options[name] === false) {\n      // exit if element is disabled from options\n      return;\n    }\n\n    // Allow to override SVG icons from options\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\n      // arrowPrevSVG\n      // arrowNextSVG\n      // closeSVG\n      // zoomSVG\n      elementHTML = pswp.options[name + 'SVG'];\n    }\n\n    pswp.dispatch('uiElementCreate', { data });\n\n    let className = 'pswp__';\n    if (data.isButton) {\n      className += 'button pswp__button--';\n    }\n    className += (data.class || data.name);\n\n    let element;\n    if (data.isButton) {\n      // create button element\n      element = createElement(className, 'button');\n      element.type = 'button';\n      // add either html or svg inside it\n      element.innerHTML = addButtonHTML(elementHTML);\n\n      if (typeof pswp.options[name + 'Title'] === 'string') {\n        element.title = pswp.options[name + 'Title'];\n      } else if (data.title) {\n        element.title = data.title;\n      }\n    } else {\n      element = createElement(className);\n    }\n\n    if (data.onInit) {\n      data.onInit(element, pswp);\n    }\n\n    if (data.onClick) {\n      element.onclick = (e) => {\n        if (typeof data.onClick === 'string') {\n          pswp[data.onClick]();\n        } else {\n          data.onClick(e, element, pswp);\n        }\n      };\n    }\n\n    // Top bar is default position\n    const appendTo = data.appendTo || 'bar';\n    let container;\n    if (appendTo === 'bar') {\n      if (!pswp.topBar) {\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', false, pswp.scrollWrap);\n      }\n      container = pswp.topBar;\n    } else {\n      // element outside of top bar gets a secondary class\n      // that makes element fade out on close\n      element.classList.add('pswp__hide-on-close');\n\n      if (appendTo === 'wrapper') {\n        container = pswp.scrollWrap;\n      } else {\n        // root element\n        container = pswp.template;\n      }\n    }\n\n    container.appendChild(element);\n  }\n}\n\n/*\n  Backward and forward arrow buttons\n */\n\nfunction initArrowButton(element, pswp, isNextButton) {\n  element.classList.add('pswp__button--arrow');\n  pswp.on('change', () => {\n    if (!pswp.options.loop) {\n      if (isNextButton) {\n        element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\n      } else {\n        element.disabled = !(pswp.currIndex > 0);\n      }\n    }\n  });\n}\n\nconst arrowPrev = {\n  name: 'arrowPrev',\n  class: 'arrow--prev',\n  title: 'Previous',\n  order: 10,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'prev',\n  onInit: initArrowButton\n};\n\nconst arrowNext = {\n  name: 'arrowNext',\n  class: 'arrow--next',\n  title: 'Next',\n  order: 11,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'next',\n  onInit: (el, pswp) => {\n    initArrowButton(el, pswp, true);\n  }\n};\n\nconst closeButton = {\n  name: 'close',\n  title: 'Close',\n  order: 20,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\n    outlineID: 'pswp__icn-close'\n  },\n  onClick: 'close'\n};\n\nconst zoomButton = {\n  name: 'zoom',\n  title: 'Zoom (z)',\n  order: 10,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\n    outlineID: 'pswp__icn-zoom'\n  },\n  onClick: 'toggleZoom'\n};\n\n// Delay before indicator will be shown\n// (if image is loaded during it - the indicator will not be displayed at all)\nconst SHOW_DELAY = 1100; // ms\n\n// Loading indicator fade-out duration\nconst FADE_OUT_DURATION = 350; // ms\n\n// Indicator width/height, used for centering\n// (it can not be centered via CSS,\n//  as viewport might be adjusted via JS padding option)\nconst INDICATOR_SIZE = 24;\n\nconst loadingIndicator = {\n  name: 'preloader',\n  appendTo: 'wrapper',\n  onInit: (indicatorElement, pswp) => {\n    let isVisible;\n    let delayTimeout;\n    let hidingTimeout;\n\n    const updateIndicatorPosition = () => {\n      if (isVisible) {\n        indicatorElement.style.left = Math.round((pswp.viewportSize.x - INDICATOR_SIZE) / 2) + 'px';\n        indicatorElement.style.top = Math.round((pswp.viewportSize.y - INDICATOR_SIZE) / 2) + 'px';\n      }\n    };\n\n    const toggleIndicatorClass = (className, add) => {\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\n    };\n\n    const setIndicatorVisibility = (visible) => {\n      if (isVisible !== visible) {\n        isVisible = visible;\n\n        clearTimeout(hidingTimeout);\n        toggleIndicatorClass('hiding', !visible);\n\n        if (!visible) {\n          // Fade out\n          hidingTimeout = setTimeout(() => {\n            toggleIndicatorClass('active', false);\n          }, FADE_OUT_DURATION);\n        } else {\n          updateIndicatorPosition();\n          // Fade in\n          toggleIndicatorClass('active', true);\n        }\n      }\n    };\n\n    pswp.on('change', () => {\n      if (!pswp.currSlide.isLoading) {\n        setIndicatorVisibility(false);\n        return;\n      }\n\n      clearTimeout(delayTimeout);\n\n      // display loading indicator with delay\n      delayTimeout = setTimeout(() => {\n        setIndicatorVisibility(pswp.currSlide.isLoading);\n      }, SHOW_DELAY);\n    });\n\n    pswp.on('loadComplete', (e) => {\n      if (pswp.currSlide === e.slide) {\n        setIndicatorVisibility(false);\n      }\n    });\n\n    pswp.on('resize', updateIndicatorPosition);\n  }\n};\n\nconst counterIndicator = {\n  name: 'counter',\n  order: 5,\n  onInit: (counterElement, pswp) => {\n    pswp.on('change', () => {\n      counterElement.innerHTML = (pswp.currIndex + 1)\n                                  + pswp.options.indexIndicatorSep\n                                  + pswp.getNumItems();\n    });\n  }\n};\n\n/**\n * Set special class on element when image is zoomed.\n *\n * By default it is used to adjust\n * zoom icon and zoom cursor via CSS.\n *\n * @param {Boolean} isZoomedIn\n */\nfunction setZoomedIn(el, isZoomedIn) {\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\n}\n\nclass UI {\n  constructor(pswp) {\n    this.pswp = pswp;\n  }\n\n  init() {\n    const { pswp } = this;\n    this.isRegistered = false;\n    this.uiElementsData = [\n      closeButton,\n      arrowPrev,\n      arrowNext,\n      zoomButton,\n      loadingIndicator,\n      counterIndicator\n    ];\n\n    pswp.dispatch('uiRegister');\n\n    // sort by order\n    this.uiElementsData.sort((a, b) => {\n      // default order is 0\n      return (a.order || 0) - (b.order || 0);\n    });\n\n    this.items = [];\n\n    this.isRegistered = true;\n    this.uiElementsData.forEach((uiElementData) => {\n      this.registerElement(uiElementData);\n    });\n\n    // TODO: ensure this works when dynamically adding or removing slides\n    if (pswp.getNumItems() === 1) {\n      pswp.template.classList.add('pswp--one-slide');\n    }\n\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\n  }\n\n  registerElement(elementData) {\n    if (this.isRegistered) {\n      this.items.push(\n        new UIElement(this.pswp, elementData)\n      );\n    } else {\n      this.uiElementsData.push(elementData);\n    }\n  }\n\n  /**\n   * Fired each time zoom or pan position is changed.\n   * Update classes that control visibility of zoom button and cursor icon.\n   */\n  _onZoomPanUpdate() {\n    const { template, currSlide, options } = this.pswp;\n    let { currZoomLevel } = currSlide;\n\n    if (this.pswp.opener.isClosing) {\n      return;\n    }\n\n    // if not open yet - check against initial zoom level\n    if (!this.pswp.opener.isOpen) {\n      currZoomLevel = currSlide.zoomLevels.initial;\n    }\n\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\n      return;\n    }\n    this._lastUpdatedZoomLevel = currZoomLevel;\n\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\n\n    // Initial and secondary zoom levels are almost equal\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\n      // disable zoom\n      setZoomedIn(template, false);\n      template.classList.remove('pswp--zoom-allowed');\n      return;\n    }\n\n    template.classList.add('pswp--zoom-allowed');\n    const secondaryIsHigher = (currZoomLevelDiff < 0);\n\n    if (currZoomLevel === currSlide.zoomLevels.secondary) {\n      setZoomedIn(template, secondaryIsHigher);\n    } else if (currZoomLevel > currSlide.zoomLevels.secondary) {\n      setZoomedIn(template, true);\n    } else {\n      //  if (currZoomLevel < currSlide.zoomLevels.secondary)\n      setZoomedIn(template, false);\n    }\n\n    if (options.imageClickAction === 'zoom'\n        || options.imageClickAction === 'zoom-or-close') {\n      template.classList.add('pswp--click-to-zoom');\n    }\n  }\n}\n\n/**\n * Get dimensions of thumbnail image\n * (click on which opens photoswipe or closes photoswipe to)\n *\n * @param {Integer} index\n * @param {Object} itemData\n * @param {PhotoSwipe} instance PhotoSwipe instance\n */\nfunction getThumbBounds(index, itemData, instance) {\n  const event = instance.dispatch('thumbBounds', {\n    index,\n    itemData,\n    instance\n  });\n\n  if (event.thumbBounds) {\n    return event.thumbBounds;\n  }\n\n  const { element } = itemData;\n\n  if (!element\n      || instance.options.thumbSelector === false) {\n    return;\n  }\n\n  const thumbSelector = instance.options.thumbSelector || 'img';\n  const thumbnail = element.matches(thumbSelector)\n    ? element : element.querySelector(thumbSelector);\n\n  if (!thumbnail) {\n    return;\n  }\n\n  const thumbAreaRect = thumbnail.getBoundingClientRect();\n\n  if (!itemData.thumbCropped) {\n    return {\n      x: thumbAreaRect.left,\n      y: thumbAreaRect.top,\n      w: thumbAreaRect.width\n    };\n  }\n\n  // get dimensions of the large image,\n  // its aspect ratio must match thumbnail image\n  const imageWidth = itemData.w;\n  const imageHeight = itemData.h;\n\n  if (!imageWidth || !imageHeight) {\n    return;\n  }\n\n  // fill image into the area\n  // (do they same as object-fit:cover does to retrieve coordinates)\n  const hRatio = thumbAreaRect.width / imageWidth;\n  const vRatio = thumbAreaRect.height / imageHeight;\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\n\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\n\n  // Coordinates of the image,\n  // as if it was not cropped,\n  // height is calculated automatically\n  const bounds = {\n    x: thumbAreaRect.left + offsetX,\n    y: thumbAreaRect.top + offsetY,\n    w: imageWidth * fillZoomLevel\n  };\n\n  // Coordinates of inner crop area\n  // relative to the image\n  bounds.innerRect = {\n    w: thumbAreaRect.width,\n    h: thumbAreaRect.height,\n    x: offsetX,\n    y: offsetY\n  };\n\n  return bounds;\n}\n\n// This much recently lazy-loaded images will not be lazy-loaded again\nconst MAX_SLIDES_TO_LAZY_LOAD = 15;\n\n/**\n * Lazy-load an image\n * This function is used both by Lightbox and PhotoSwipe core,\n * thus it can be called before dialog is opened.\n *\n * @param {Object} itemData Data about the slide\n * @param {PhotoSwipeBase}  instance PhotoSwipe or PhotoSwipeLightbox\n * @returns {Object|Boolean} Image that is being decoded or false.\n */\nfunction lazyLoadData(itemData, instance) {\n  const ContentClass = instance.getContentClass(itemData);\n\n  if (!ContentClass) {\n    return;\n  }\n\n  // src/slide/content/content.js\n  const content = new ContentClass(itemData, instance);\n\n  if (!content.lazyLoad) {\n    return;\n  }\n\n  const { options } = instance;\n\n  // We need to know dimensions of the image to preload it,\n  // as it might use srcset and we need to define sizes\n  const viewportSize = instance.viewportSize || getViewportSize(options);\n  const panAreaSize = getPanAreaSize(options, viewportSize);\n\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\n  zoomLevel.update(content.width, content.height, panAreaSize);\n\n  content.lazyLoad();\n  content.setDisplayedSize(\n    Math.ceil(content.width * zoomLevel.initial),\n    Math.ceil(content.height * zoomLevel.initial)\n  );\n}\n\n/**\n * Lazy-loads specific slide.\n * This function is used both by Lightbox and PhotoSwipe core,\n * thus it can be called before dialog is opened.\n *\n * By default it loads image based on viewport size and initial zoom level.\n *\n * @param {Integer} index Slide index\n * @param {Object}  instance PhotoSwipe or PhotoSwipeLightbox eventable instance\n */\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\n    return;\n  }\n\n  lazyLoadData(itemData, instance);\n}\n\nclass LazyLoader {\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.clearRecent();\n  }\n\n  /**\n   * Lazy load nearby slides based on `preload` option.\n   *\n   * @param {Integer} diff Difference between slide indexes that was changed recently, or 0.\n   */\n  update(diff) {\n    const { pswp } = this;\n\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\n      return;\n    }\n\n    const { preload } = pswp.options;\n    const isForward = diff === undefined ? true : (diff >= 0);\n    let i;\n\n    // preload[1] - num items to preload in forward direction\n    for (i = 0; i <= preload[1]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\n    }\n\n    // preload[0] - num items to preload in backward direction\n    for (i = 1; i <= preload[0]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\n    }\n  }\n\n  clearRecent() {\n    this._recentlyLazyLoadedIndexes = [];\n  }\n\n  /**\n   * Add index to recently lazy-loaded slides.\n   *\n   * To prevent duplciate downloads,\n   * we keep track of recently preloaded slides.\n   *\n   * @param {Integer} index\n   */\n  addRecent(index) {\n    if (this._recentlyLazyLoadedIndexes.indexOf(index) > -1) {\n      // already exists\n      return;\n    }\n\n    if (this._recentlyLazyLoadedIndexes.length > MAX_SLIDES_TO_LAZY_LOAD - 1) {\n      this._recentlyLazyLoadedIndexes.pop();\n    }\n\n    // the most recent lazy loaded index is the first\n    // (thus push to the beginning)\n    this._recentlyLazyLoadedIndexes.unshift(index);\n\n    return true;\n  }\n\n  loadSlideByIndex(index) {\n    index = this.pswp.getLoopedIndex(index);\n\n    if (this.addRecent(index)) {\n      lazyLoadSlide(index, this.pswp);\n    }\n  }\n\n  // @see lazyLoadData\n  loadSlideByData(data, decode) {\n    lazyLoadData(data, this.pswp);\n  }\n}\n\n/**\n * Base PhotoSwipe event object\n */\nclass PhotoSwipeEvent {\n  constructor(type, details) {\n    this.type = type;\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n}\n\n/**\n * PhotoSwipe base class that can listen and dispatch for events.\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\n */\nclass Eventable {\n  constructor() {\n    this._listeners = {};\n  }\n\n  on(name, fn) {\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n    this._listeners[name].push(fn);\n\n    // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n    if (this.pswp) {\n      this.pswp.on(name, fn);\n    }\n  }\n\n  off(name, fn) {\n    if (this._listeners[name]) {\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\n    }\n\n    if (this.pswp) {\n      this.pswp.off(name, fn);\n    }\n  }\n\n  dispatch(name, details) {\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n\n    const event = new PhotoSwipeEvent(name, details);\n\n    if (!this._listeners) {\n      return event;\n    }\n\n    if (this._listeners[name]) {\n      this._listeners[name].forEach((listener) => {\n        listener.call(this, event);\n      });\n    }\n\n    return event;\n  }\n}\n\nclass Content {\n  /**\n   * @param {Object} itemData Slide data\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\n   * @param {Slide|undefined} slide Slide that requested the image,\n   *                                can be undefined if image was requested by something else\n   *                                (for example by lazy-loader)\n   */\n  constructor(itemData, instance, slide) {\n    this.options = instance.options;\n    this.instance = instance;\n    this.data = itemData;\n\n    if (slide) {\n      this.slide = slide;\n      this.pswp = slide.pswp;\n    }\n\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n\n    this.state = LOAD_STATE.IDLE;\n  }\n\n  /**\n   * Load the content\n   *\n   * @param {Boolean} isLazy If method is executed by lazy-loader\n   */\n  load(/* isLazy */) {\n    if (!this.element) {\n      this.element = createElement('pswp__content');\n      this.element.style.position = 'absolute';\n      this.element.style.left = 0;\n      this.element.style.top = 0;\n      this.element.innerHTML = this.data.html || '';\n    }\n  }\n\n  isZoomable() {\n    return false;\n  }\n\n  usePlaceholder() {\n    return false;\n  }\n\n  activate() {\n\n  }\n\n  deactivate() {\n\n  }\n\n  setDisplayedSize(width, height) {\n    if (this.element) {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n\n    if (this.slide) {\n      this.pswp.dispatch('loadComplete', { slide: this.slide });\n    }\n  }\n\n  // If the placeholder should be kept in DOM\n  keepPlaceholder() {\n    return (this.state === LOAD_STATE.LOADING);\n  }\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n\n    if (this.slide) {\n      this.pswp.dispatch('loadComplete', { slide: this.slide, isError: true });\n      this.pswp.dispatch('loadError', { slide: this.slide });\n    }\n  }\n\n  getErrorElement() {\n    return false;\n  }\n\n  appendTo(container) {\n    if (this.element && !this.element.parentNode) {\n      container.appendChild(this.element);\n    }\n  }\n\n  destroy() {\n\n  }\n}\n\nclass ImageContent extends Content {\n  load(/* isLazy */) {\n    if (this.element) {\n      return;\n    }\n\n    const imageSrc = this.data.src;\n\n    if (!imageSrc) {\n      return;\n    }\n\n    this.element = createElement('pswp__img', 'img');\n\n    if (this.data.srcset) {\n      this.element.srcset = this.data.srcset;\n    }\n\n    this.element.src = imageSrc;\n\n    this.element.alt = this.data.alt || '';\n\n    this.state = LOAD_STATE.LOADING;\n\n    if (this.element.complete) {\n      this.onLoaded();\n    } else {\n      this.element.onload = () => {\n        this.onLoaded();\n      };\n\n      this.element.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n\n  setDisplayedSize(width, height) {\n    const image = this.element;\n    if (image) {\n      setWidthHeight(image, width, 'auto');\n\n      // Handle srcset sizes attribute.\n      //\n      // Never lower quality, if it was increased previously.\n      // Chrome does this automatically, Firefox and Safari do not,\n      // so we store largest used size in dataset.\n      if (image.srcset\n          && (!image.dataset.largestUsedSize || width > image.dataset.largestUsedSize)) {\n        image.sizes = width + 'px';\n        image.dataset.largestUsedSize = width;\n      }\n\n      if (this.slide) {\n        this.pswp.dispatch('imageSizeChange', { slide: this.slide, width, height });\n      }\n    }\n  }\n\n  isZoomable() {\n    return (this.state !== LOAD_STATE.ERROR);\n  }\n\n  usePlaceholder() {\n    return true;\n  }\n\n  lazyLoad() {\n    this.load();\n  }\n\n  destroy() {\n    if (this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = null;\n    }\n  }\n\n  appendTo(container) {\n    // Use decode() on nearby slides\n    //\n    // Nearby slide images are in DOM and not hidden via display:none.\n    // However, they are placed offscreen (to the left and right side).\n    //\n    // Some browsers do not composite the image until it's actually visible,\n    // using decode() helps.\n    //\n    // You might ask \"why dont you just decode() and then append all images\",\n    // that's because I want to show image before it's fully loaded,\n    // as browser can render parts of image while it is loading.\n    if (this.slide && !this.slide.isActive && ('decode' in this.element)) {\n      this.isDecoding = true;\n      // Make sure that we start decoding on the next frame\n      requestAnimationFrame(() => {\n        if (this.element) {\n          this.element.decode().then(() => {\n            this.isDecoding = false;\n            requestAnimationFrame(() => {\n              this.appendImageTo(container);\n            });\n          }).catch(() => {});\n        }\n      });\n    } else {\n      this.appendImageTo(container);\n    }\n  }\n\n  activate() {\n    if (this.slide && this.slide.container && this.isDecoding) {\n      // add image to slide when it becomes active,\n      // even if it's not finished decoding\n      this.appendImageTo(this.slide.container);\n    }\n  }\n\n  getErrorElement() {\n    const el = createElement('pswp__error-msg-container');\n    el.innerHTML = this.options.errorMsg;\n    const linkEl = el.querySelector('a');\n    if (linkEl) {\n      linkEl.href = this.data.src;\n    }\n    return el;\n  }\n\n  appendImageTo(container) {\n    // ensure that element exists and is not already appended\n    if (this.element && !this.element.parentNode) {\n      container.appendChild(this.element);\n    }\n  }\n}\n\n/**\n * PhotoSwipe base class that can retrieve data about every slide.\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\n */\n\nclass PhotoSwipeBase extends Eventable {\n  constructor() {\n    super();\n    this.contentTypes = {\n      image: ImageContent,\n      html: Content\n    };\n  }\n\n  /**\n   * Get total number of slides\n   */\n  getNumItems() {\n    let numItems;\n    const { dataSource } = this.options;\n    if (!dataSource) {\n      numItems = 0;\n    } else if (dataSource.length) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if (dataSource.gallery) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    }\n\n    // allow to filter number of items\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n\n    return event.numItems;\n  }\n\n  /**\n   * Add or set slide content type\n   *\n   * @param {String} type\n   * @param {Class} ContentClass\n   */\n  addContentType(type, ContentClass) {\n    this.contentTypes[type] = ContentClass;\n  }\n\n  /**\n   * Get slide content class based on its data\n   *\n   * @param {Object} slideData\n   * @param {Integer} slideIndex\n   * @returns Class\n   */\n  getContentClass(slideData) {\n    if (slideData.type) {\n      return this.contentTypes[slideData.type];\n    } else if (slideData.src) {\n      return this.contentTypes.image;\n    } else if (slideData.html) {\n      return this.contentTypes.html;\n    }\n  }\n\n  /**\n   * Get item data by index.\n   *\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\n   * For example, it may contain properties like\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\n   *\n   * @param {Integer} index\n   */\n  getItemData(index) {\n    const { dataSource } = this.options;\n    let dataSourceItem;\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && dataSource.gallery) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallerySelecor and childSelector options\n\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      dataSourceItem = dataSource.items[index];\n    }\n\n    let itemData = dataSourceItem;\n\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    }\n\n    // allow to filter itemData\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n\n    return event.itemData;\n  }\n\n  /**\n   * Get array of gallery DOM elements,\n   * based on childSelector and gallery element.\n   *\n   * @param {Element} galleryElement\n   */\n  _getGalleryDOMElements(galleryElement) {\n    if (this.options.children || this.options.childSelector) {\n      return getElementsFromOption(\n        this.options.children,\n        this.options.childSelector,\n        galleryElement\n      ) || [];\n    }\n\n    return [galleryElement];\n  }\n\n  /**\n   * Converts DOM element to item data object.\n   *\n   * @param {Element} element DOM element\n   */\n  // eslint-disable-next-line class-methods-use-this\n  _domElementToItemData(element) {\n    const itemData = {\n      element\n    };\n\n    const linkEl = element.tagName === 'A' ? element : element.querySelector('a');\n\n    if (!linkEl) {\n      return itemData;\n    }\n\n    // src comes from data-pswp-src attribute,\n    // if it's empty link href is used\n    itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n\n    itemData.srcset = linkEl.dataset.pswpSrcset;\n\n    itemData.w = parseInt(linkEl.dataset.pswpWidth, 10);\n    itemData.h = parseInt(linkEl.dataset.pswpHeight, 10);\n\n    if (linkEl.dataset.pswpType) {\n      itemData.type = linkEl.dataset.pswpType;\n    }\n\n    const thumbnailEl = element.querySelector('img');\n\n    if (thumbnailEl) {\n      // define msrc only if it's the first slide,\n      // as rendering (even small stretched thumbnail) is an expensive operation\n      itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n      itemData.alt = thumbnailEl.getAttribute('alt');\n    }\n\n    if (linkEl.dataset.cropped) {\n      itemData.thumbCropped = true;\n    }\n\n    return itemData;\n  }\n}\n\n/**\n * Manages opening and closing transitions of the PhotoSwipe.\n *\n * It can perform zoom, fade or no transition.\n */\n\n// some browsers do not paint\n// elements which opacity is set to 0,\n// since we need to pre-render elements for the animation -\n// we set it to the minimum amount\nconst MIN_OPACITY = 0.003;\n\n// Transitions for slides wider than this will be discarded\nconst MAX_SLIDE_WIDTH_TO_ANIMATE = 4000;\n\nclass Opener {\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isClosed = true;\n    this._prepareOpen = this._prepareOpen.bind(this);\n\n    // Override initial zoom and pan position\n    pswp.on('firstZoomPan', this._prepareOpen);\n  }\n\n  open() {\n    this._prepareOpen();\n    this._start();\n  }\n\n  close() {\n    if (this.isClosed || this.isClosing || this.isOpening) {\n      // if we close during opening animation\n      // for now do nothing,\n      // browsers aren't good at changing the direction of the CSS transition\n      return false;\n    }\n\n    const slide = this.pswp.currSlide;\n\n    this.isOpen = false;\n    this.isOpening = false;\n    this.isClosing = true;\n    this._duration = this.pswp.options.hideAnimationDuration;\n\n    // Automatically disable transition if the current slide\n    // is at MAX_SLIDE_WIDTH_TO_ANIMATE or wider\n    if (slide && slide.currZoomLevel * slide.width >= MAX_SLIDE_WIDTH_TO_ANIMATE) {\n      this._duration = 0;\n    }\n\n    this._applyStartProps();\n    setTimeout(() => {\n      this._start();\n    }, this._croppedZoom ? 30 : 0);\n\n    return true;\n  }\n\n  _prepareOpen() {\n    this.pswp.off('firstZoomPan', this._prepareOpen);\n    if (!this.isOpening) {\n      this.isOpening = true;\n      this.isClosing = false;\n      this._duration = this.pswp.options.showAnimationDuration;\n      this._applyStartProps();\n    }\n  }\n\n  _applyStartProps() {\n    const { pswp } = this;\n    const slide = this.pswp.currSlide;\n    const { options } = pswp;\n\n    if (options.showHideAnimationType === 'fade') {\n      options.showHideOpacity = true;\n      this._thumbBounds = false;\n    } else if (options.showHideAnimationType === 'none') {\n      options.showHideOpacity = false;\n      this._duration = 0;\n      this._thumbBounds = false;\n    } else if (this.isOpening && pswp._initialThumbBounds) {\n      // Use initial bounds if defined\n      this._thumbBounds = pswp._initialThumbBounds;\n    } else {\n      this._thumbBounds = this.pswp.getThumbBounds();\n    }\n\n    this._placeholder = slide.getPlaceholderElement();\n\n    pswp.animations.stopAll();\n\n    // Discard animations when duration is less than 50ms\n    this._useAnimation = (this._duration > 50);\n    this._animateZoom = Boolean(this._thumbBounds)\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\n    if (!this._animateZoom) {\n      this._animateRootOpacity = true;\n\n      if (this.isOpening) {\n        slide.zoomAndPanToInitial();\n        slide.applyCurrentZoomPan();\n      }\n    } else {\n      this._animateRootOpacity = options.showHideOpacity;\n    }\n    this._animateBgOpacity = !this._animateRootOpacity;\n    this._opacityElement = this._animateRootOpacity ? pswp.template : pswp.bg;\n\n    if (!this._useAnimation) {\n      this._duration = 0;\n      this._animateZoom = false;\n      this._animateBgOpacity = false;\n      this._animateRootOpacity = true;\n      if (this.isOpening) {\n        pswp.template.style.opacity = MIN_OPACITY;\n        pswp.applyBgOpacity(1);\n      }\n      return;\n    }\n\n    if (this._animateZoom && this._thumbBounds.innerRect) {\n      // Properties are used when animation from cropped thumbnail\n      this._croppedZoom = true;\n      this._cropContainer1 = this.pswp.container;\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\n\n      pswp.container.style.overflow = 'hidden';\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\n    } else {\n      this._croppedZoom = false;\n    }\n\n    if (this.isOpening) {\n      // Apply styles before opening transition\n      if (this._animateBgOpacity) {\n        pswp.bg.style.opacity = MIN_OPACITY;\n        pswp.template.style.opacity = 1;\n      }\n\n      if (this._animateRootOpacity) {\n        pswp.template.style.opacity = MIN_OPACITY;\n        pswp.applyBgOpacity(1);\n      }\n\n      if (this._animateZoom) {\n        this._setClosedStateZoomPan();\n        if (this._placeholder) {\n          // tell browser that we plan to animate the placeholder\n          this._placeholder.willChange = 'transform';\n\n          // hide placeholder to allow hiding of\n          // elements that overlap it (such as icons over the thumbnail)\n          this._placeholder.style.opacity = MIN_OPACITY;\n        }\n      }\n    } else if (this.isClosing) {\n      // hide nearby slides to make sure that\n      // they are not painted during the transition\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\n\n      if (this._croppedZoom) {\n        if (pswp.mainScroll.x !== 0) {\n          // shift the main scroller to zero position\n          pswp.mainScroll.resetPosition();\n          pswp.mainScroll.resize();\n        }\n      }\n    }\n  }\n\n  _start() {\n    if (this.isOpening\n        && this._useAnimation\n        && this._placeholder\n        && this._placeholder.tagName === 'IMG') {\n      // To ensure smooth animation\n      // we wait till the current slide image placeholder is decoded,\n      // but no longer than 250ms,\n      // and no shorter than 50ms\n      // (just using requestanimationframe is not enough in Firefox,\n      // for some reason)\n      new Promise((resolve) => {\n        let decoded = false;\n        let isDelaying = true;\n        decodeImage(this._placeholder).finally(() => {\n          decoded = true;\n          if (!isDelaying) {\n            resolve();\n          }\n        });\n        setTimeout(() => {\n          isDelaying = false;\n          if (decoded) {\n            resolve();\n          }\n        }, 50);\n        setTimeout(resolve, 250);\n      }).finally(() => this._initiate());\n    } else {\n      this._initiate();\n    }\n  }\n\n  _initiate() {\n    this.pswp.template.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\n\n    this.pswp.dispatch('initialZoom' + (this.isOpening ? 'In' : 'Out'));\n    this.pswp.template.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\n\n    if (this.isOpening) {\n      if (this._placeholder) {\n        // unhide the placeholder\n        this._placeholder.style.opacity = 1;\n      }\n      this._animateToOpenState();\n    } else if (this.isClosing) {\n      this._animateToClosedState();\n    }\n\n    if (!this._useAnimation) {\n      this._onAnimationComplete();\n    }\n  }\n\n  _onAnimationComplete() {\n    const { pswp } = this;\n    this.isOpen = this.isOpening;\n    this.isClosed = this.isClosing;\n    this.isOpening = false;\n    this.isClosing = false;\n\n    pswp.dispatch('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'));\n\n    if (this.isClosed) {\n      pswp.destroy();\n    } else if (this.isOpen) {\n      if (this._animateZoom) {\n        pswp.container.style.overflow = 'visible';\n        pswp.container.style.width = '100%';\n      }\n      pswp.currSlide.applyCurrentZoomPan();\n    }\n  }\n\n  _animateToOpenState() {\n    const { pswp } = this;\n    if (this._animateZoom) {\n      if (this._croppedZoom) {\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\n        this._animateTo(this._cropContainer2, 'transform', 'none');\n      }\n\n      pswp.currSlide.zoomAndPanToInitial();\n      this._animateTo(\n        pswp.currSlide.container,\n        'transform',\n        pswp.currSlide.getCurrentTransform()\n      );\n    }\n\n    if (this._animateBgOpacity) {\n      this._animateTo(pswp.bg, 'opacity', pswp.options.bgOpacity);\n    }\n\n    if (this._animateRootOpacity) {\n      this._animateTo(pswp.template, 'opacity', 1);\n    }\n  }\n\n  _animateToClosedState() {\n    const { pswp } = this;\n\n    if (this._animateZoom) {\n      this._setClosedStateZoomPan(true);\n    }\n\n    if (this._animateBgOpacity\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\n      this._animateTo(pswp.bg, 'opacity', 0);\n    }\n\n    if (this._animateRootOpacity) {\n      this._animateTo(pswp.template, 'opacity', 0);\n    }\n  }\n\n  _setClosedStateZoomPan(animate) {\n    const { pswp } = this;\n    const { innerRect } = this._thumbBounds;\n    const { currSlide, viewportSize } = pswp;\n\n    if (this._croppedZoom) {\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\n      const containerTwoPanX = viewportSize.x - innerRect.w;\n      const containerTwoPanY = viewportSize.y - innerRect.h;\n\n\n      if (animate) {\n        this._animateTo(\n          this._cropContainer1,\n          'transform',\n          toTransformString(containerOnePanX, containerOnePanY)\n        );\n\n        this._animateTo(\n          this._cropContainer2,\n          'transform',\n          toTransformString(containerTwoPanX, containerTwoPanY)\n        );\n      } else {\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\n      }\n    }\n\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\n\n    if (animate) {\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\n    } else {\n      currSlide.applyCurrentZoomPan();\n    }\n  }\n\n  /**\n   * @param {Element} target\n   * @param {String} prop\n   * @param {String} propValue\n   */\n  _animateTo(target, prop, propValue) {\n    if (!this._duration) {\n      target.style[prop] = propValue;\n      return;\n    }\n\n    const { animations } = this.pswp;\n    const animProps = {\n      duration: this._duration,\n      easing: this.pswp.options.easing,\n      onComplete: () => {\n        if (!animations.activeAnimations.length) {\n          this._onAnimationComplete();\n        }\n      },\n      target,\n    };\n    animProps[prop] = propValue;\n    animations.startTransition(animProps);\n  }\n}\n\nconst defaultOptions = {\n  allowPanToNext: true,\n  spacing: 0.1,\n  loop: true,\n  pinchToClose: true,\n  closeOnVerticalDrag: true,\n  hideAnimationDuration: 333,\n  showAnimationDuration: 333,\n  zoomAnimationDuration: 333,\n  escKey: true,\n  arrowKeys: true,\n  returnFocus: true,\n  limitMaxZoom: true,\n\n  clickToCloseNonZoomable: true,\n  imageClickAction: 'zoom-or-close',\n  bgClickAction: 'close',\n  tapAction: 'toggle-controls',\n  doubleTapAction: 'zoom',\n\n  indexIndicatorSep: ' / ',\n\n  bgOpacity: 0.8,\n\n  index: 0,\n  errorMsg: '<div class=\"pswp__error-msg\"><a href=\"\" target=\"_blank\">The image</a> could not be loaded.</div>',\n  preload: [1, 2],\n  easing: 'cubic-bezier(.4,0,.22,1)'\n};\n\nclass PhotoSwipe extends PhotoSwipeBase {\n  constructor(items, options) {\n    super();\n\n    this.items = items;\n\n    this._prepareOptions(options);\n\n    // offset of viewport relative to document\n    this.offset = {};\n\n    this._prevViewportSize = {};\n\n    // Size of scrollable PhotoSwipe viewport\n    this.viewportSize = {};\n\n    // background (backdrop) opacity\n    this.bgOpacity = 1;\n\n    this.events = new DOMEvents();\n\n    /** @type {Animations} */\n    this.animations = new Animations();\n\n    this.mainScroll = new MainScroll(this);\n    this.gestures = new Gestures(this);\n    this.opener = new Opener(this);\n    this.keyboard = new Keyboard(this);\n    this.lazyLoader = new LazyLoader(this);\n  }\n\n  init() {\n    if (this.isOpen || this.isDestroying) {\n      return;\n    }\n\n    this.isOpen = true;\n\n    if (this.getNumItems() < 3) {\n      // disable loop if less than 3 items,\n      // as we do not clone slides\n      this.options.loop = false;\n    }\n\n    this.dispatch('init');\n\n    this._createMainStructure();\n\n    // init modules\n    // _modules.forEach(function (module) {\n    //   module();\n    // });\n\n    // add classes to the root element of PhotoSwipe\n    let rootClasses = 'pswp--open';\n    if (this.gestures.supportsTouch) {\n      rootClasses += ' pswp--touch';\n    }\n    if (!this.options.allowMouseDrag) {\n      rootClasses += ' pswp--no-mouse-drag';\n    }\n    if (this.options.mainClass) {\n      rootClasses += ' ' + this.options.mainClass;\n    }\n    this.template.className += ' ' + rootClasses;\n\n    this.currIndex = this.options.index || 0;\n    this.potentialIndex = this.currIndex;\n    this.dispatch('firstUpdate'); // starting index can be modified here\n\n    // initialize scroll wheel handler to block the scroll\n    this.scrollWheel = new ScrollWheel(this);\n\n    // sanitize index\n    if (Number.isNaN(this.currIndex)\n        || this.currIndex < 0\n        || this.currIndex >= this.getNumItems()) {\n      this.currIndex = 0;\n    }\n\n    if (!this.gestures.supportsTouch) {\n      // enable mouse features if no touch support detected\n      this.mouseDetected();\n    }\n\n    // causes forced synchronous layout\n    this.updateSize();\n\n    this.offset.y = window.pageYOffset;\n\n    this._initialItemData = this.getItemData(this.currIndex);\n    this.dispatch('gettingData', this.currIndex, this._initialItemData, true);\n\n    // *Layout* - calculate size and position of elements here\n    this._initialThumbBounds = this.getThumbBounds();\n    this.dispatch('initialLayout');\n\n    this.on('initialZoomInEnd', () => {\n      // Add content to the previous and next slide\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\n\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\n\n      this.appendHeavy();\n\n      this.lazyLoader.update();\n\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\n      this.dispatch('bindEvents');\n    });\n\n    // remove placeholder when slide is loaded\n    this.on('loadComplete', (e) => {\n      if (e.slide.heavyAppended) {\n        e.slide.removePlaceholder();\n      }\n    });\n\n    this.on('loadError', (e) => {\n      if (e.slide.heavyAppended) {\n        e.slide.removePlaceholder();\n        e.slide.displayError();\n      }\n    });\n\n    // set content for center slide (first time)\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\n    this.dispatch('change');\n\n    this.opener.open();\n\n    this.dispatch('afterInit');\n\n    return true;\n  }\n\n  /**\n   * Get looped slide index\n   * (for example, -1 will return the last slide)\n   *\n   * @param {Integer} index\n   */\n  getLoopedIndex(index) {\n    const numSlides = this.getNumItems();\n\n    if (this.options.loop) {\n      if (index > numSlides - 1) {\n        index -= numSlides;\n      }\n\n      if (index < 0) {\n        index += numSlides;\n      }\n    }\n\n    index = clamp(index, 0, numSlides - 1);\n\n    return index;\n  }\n\n  /**\n   * Get the difference between current index and provided index.\n   * Used to determine the direction of movement\n   * or if slide should be moved at all.\n   *\n   * @param {Integer} index\n   */\n  getIndexDiff(index) {\n    if (this.options.loop) {\n      const lastItemIndex = this.getNumItems() - 1;\n      // Moving from the last to the first or vice-versa:\n      if (this.currIndex === 0 && index === lastItemIndex) {\n        // go back one slide\n        return -1;\n      } if (this.currIndex === lastItemIndex && index === 0) {\n        // go forward one slide\n        return 1;\n      }\n    }\n\n    return index - this.currIndex;\n  }\n\n  appendHeavy() {\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\n      if (itemHolder.slide) {\n        itemHolder.slide.appendHeavy();\n      }\n    });\n  }\n\n  /**\n   * Change the slide\n   * @param  {Integer} New index\n   */\n  goTo(index) {\n    index = this.getLoopedIndex(index);\n\n    // TODO: allow to pause the event propagation?\n\n    const indexChanged = this.mainScroll.moveIndexBy(index - this.potentialIndex);\n    if (indexChanged) {\n      this.dispatch('afterGoto');\n    }\n  }\n\n  /**\n   * Go to the next slide.\n   */\n  next() {\n    this.goTo(this.potentialIndex + 1);\n  }\n\n  /**\n   * Go to the next slide.\n   */\n  prev() {\n    this.goTo(this.potentialIndex - 1);\n  }\n\n  /**\n   * @see slide/slide.js zoomTo\n   */\n  zoomTo(...args) {\n    this.currSlide.zoomTo(...args);\n  }\n\n  /**\n   * @see slide/slide.js toggleZoom\n   */\n  toggleZoom() {\n    this.currSlide.toggleZoom();\n  }\n\n  /**\n   * Close the gallery.\n   * After closing transition ends - destroy it\n   */\n  close() {\n    if (!this.opener.isOpen || this.isDestroying) {\n      return;\n    }\n\n    this.isDestroying = true;\n\n    this.dispatch('close');\n\n    this.events.removeAll();\n    this.opener.close();\n  }\n\n  /**\n   * Destroys the gallery:\n   * - unbinds events,\n   * - cleans intervals and timeouts\n   * - removes elements from DOM\n   */\n  destroy() {\n    if (!this.isDestroying) {\n      this.close();\n      return;\n    }\n\n    this.dispatch('destroy');\n\n    this.listeners = null;\n\n    this.scrollWrap.ontouchmove = null;\n    this.scrollWrap.ontouchend = null;\n\n    this.template.remove();\n    this.events.removeAll();\n  }\n\n  setContent(holder, index) {\n    // destroy previous slide to clean the memory\n    if (holder.slide) {\n      holder.slide.destroy();\n    }\n\n    if (this.options.loop) {\n      index = this.getLoopedIndex(index);\n    } else if (index < 0 || index >= this.getNumItems()) {\n      // empty holder\n      holder.el.innerHTML = '';\n      return;\n    }\n\n    const itemData = this.getItemData(index);\n    holder.slide = new Slide(itemData, index, this);\n\n    // set current slide\n    if (index === this.currIndex) {\n      this.currSlide = holder.slide;\n    }\n\n    holder.slide.append(holder.el);\n  }\n\n  getViewportCenterPoint() {\n    return {\n      x: this.viewportSize.x / 2,\n      y: this.viewportSize.y / 2\n    };\n  }\n\n  /**\n   * Update size of all elements.\n   * Executed on init and on page resize.\n   *\n   * @param  {Boolean} force Update size even if size of viewport was not changed.\n   */\n  updateSize(force) {\n    // let item;\n    // let itemIndex;\n\n    if (this.isDestroying) {\n      // exit if PhotoSwipe is closed or closing\n      // (to avoid errors, as resize event might be delayed)\n      return;\n    }\n\n    //const newWidth = this.scrollWrap.clientWidth;\n    //const newHeight = this.scrollWrap.clientHeight;\n\n    const newViewportSize = getViewportSize(this.options, this);\n\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\n      // Exit if dimensions were not changed\n      return;\n    }\n\n    //this._prevViewportSize.x = newWidth;\n    //this._prevViewportSize.y = newHeight;\n    equalizePoints(this._prevViewportSize, newViewportSize);\n\n    this.dispatch('beforeResize');\n\n    equalizePoints(this.viewportSize, this._prevViewportSize);\n\n    this._updatePageScrollOffset();\n\n    this.dispatch('viewportSize');\n\n    // Resize slides only after opener animation is finished\n    // and don't re-calculate size on inital size update\n    this.mainScroll.resize(this.opener.isOpen);\n\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\n      this.mouseDetected();\n    }\n\n    this.dispatch('resize');\n  }\n\n  applyBgOpacity(opacity) {\n    this.bgOpacity = Math.max(opacity, 0);\n    this.bg.style.opacity = this.bgOpacity * this.options.bgOpacity;\n  }\n\n  /**\n   * Whether mouse is detected\n   */\n  mouseDetected() {\n    if (!this.hasMouse) {\n      this.hasMouse = true;\n      this.template.classList.add('pswp--has_mouse');\n    }\n  }\n\n  /**\n   * Page resize event handler\n   */\n  _handlePageResize() {\n    this.updateSize();\n\n    // In iOS webview, if element size depends on document size,\n    // it'll be measured incorrectly in resize event\n    //\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\n      setTimeout(() => {\n        this.updateSize();\n      }, 500);\n    }\n  }\n\n  /**\n   * Page scroll offset is used\n   * to get correct coordinates\n   * relative to PhotoSwipe viewport.\n   */\n  _updatePageScrollOffset() {\n    this.setScrollOffset(0, window.pageYOffset);\n  }\n\n  setScrollOffset(x, y) {\n    this.offset.x = x;\n    this.offset.y = y;\n    this.dispatch('updateScrollOffset');\n  }\n\n  /**\n   * Create main HTML structure of PhotoSwipe,\n   * and add it to DOM\n   */\n  _createMainStructure() {\n    // root DOM element of PhotoSwipe (.pswp)\n    this.template = createElement('pswp');\n    this.template.setAttribute('tabindex', -1);\n    this.template.setAttribute('role', 'dialog');\n\n    // Background is added as a separate element,\n    // as animating opacity is faster than animating rgba()\n    this.bg = createElement('pswp__bg', false, this.template);\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.template);\n    this.container = createElement('pswp__container', false, this.scrollWrap);\n\n    this.mainScroll.appendHolders();\n\n    this.ui = new UI(this);\n    this.ui.init();\n\n    // append to DOM\n    (this.options.appendToEl || document.body).appendChild(this.template);\n  }\n\n\n  /**\n   * Get position and dimensions of small thumbnail\n   *   {x:,y:,w:}\n   *\n   * Height is optional (calculated based on the large image)\n   */\n  getThumbBounds() {\n    return getThumbBounds(\n      this.currIndex,\n      this.currSlide ? this.currSlide.data : this._initialItemData,\n      this\n    );\n  }\n\n  _prepareOptions(options) {\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\n      options.showHideAnimationType = 'none';\n      options.zoomAnimationDuration = 0;\n    }\n\n    this.options = {\n      ...defaultOptions,\n      ...options\n    };\n  }\n}\n\nexport { Content, ImageContent, PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n","// pswp.js ... load Photoswiper plugin and initial my images gallery\n\n// document.addEventListener(\"DOMContentLoaded\", () => {});\n\nimport PhotoSwipeLightbox from 'photoswipe/dist/photoswipe-lightbox.esm.js'\nimport PhotoSwipe from 'photoswipe/dist/photoswipe.esm.js'\n\n// don't forget to include CSS in some way\n// import 'photoswipe/dist/photoswipe.css';\n\nconst lightbox = new PhotoSwipeLightbox({\n  gallerySelector: '.pswp-gallery',\n  childSelector: 'figure a',\n  pswpModule: PhotoSwipe,\n})\nlightbox.init()\n\nconst onelightbox = new PhotoSwipeLightbox({\n  gallerySelector: '.pswp-img a',\n  pswpModule: PhotoSwipe,\n})\nonelightbox.init()\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","setWidthHeight","w","h","style","width","height","addEventListener","header","querySelector","scrolling","previousTop","autoHideHeader","currentTop","documentElement","scrollTop","body","classList","remove","add","window","requestAnimationFrame","setTimeout","innerWidth","getElementsByTagName","length","insertAdjacentHTML","scrollToTopLoader","flag","arrowUp","getElementById","counter","this","scrollY","onclick","event","scrollTo","left","scrollX","top","behavior","eventScrollToTop","LOAD_STATE","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","e","which","ctrlKey","metaKey","altKey","shiftKey","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","transform","setTransitionStyle","prop","duration","ease","transition","img","decode","complete","Promise","resolve","reject","onload","onerror","PhotoSwipeLightbox","gallerySelector","childSelector","pswpModule","PhotoSwipe","init"],"mappings":";;;;;AAOO,SAASA,EAAcC,EAAWC,EAASC,SAC1CC,EAAKC,SAASL,cAAcE,GAAW,cACzCD,IACFG,EAAGH,UAAYA,GAEbE,GACFA,EAAWG,YAAYF,GAElBA,EA0GF,SAASG,EAAeH,EAAII,EAAGC,GACpCL,EAAGM,MAAMC,MAAsB,iBAANH,EAAmBA,EAAI,KAAQA,EACxDJ,EAAGM,MAAME,OAAuB,iBAANH,EAAmBA,EAAI,KAAQA,ECzH3DJ,SAASQ,iBAAiB,oBAAoB,WACtCC,EAAST,SAASU,cAAc,qBAClCC,GAAY,EACZC,EAAc,WAgBTC,QACHC,EAAcd,SAASe,iBAAmBf,SAASe,gBAAgBC,WAAchB,SAASiB,KAAKD,UAG/FJ,EAAcE,EAnBF,IAmB6C,IAAfA,EAC5CL,EAAOS,UAAUC,OAAO,aACfL,EAAaF,EArBR,IAqBqCE,EApBpC,KAsBfL,EAAOS,UAAUE,IAAI,aAGvBR,EAAcE,EACdH,GAAY,EAxBdX,SAASQ,iBAAiB,UAAU,KAC7BG,IACHA,GAAY,EAEPU,OAAOC,sBAGVA,sBAAsBT,GAFtBU,WAAWV,EAAgB,YC+BnCb,SAASQ,iBAAiB,oBAAoB,KACrBa,OAAOG,YAEN,MAhB1B,eAQMzB,EAAKC,SAASyB,qBAAqB,UACvC1B,EAAGA,EAAG2B,OAAS,GAAGC,mBAAmB,WARpB,8QAgBfC,GA/CJ,eACMC,GAAO,QAELC,EAAU9B,SAAS+B,eAAe,eAExCV,OAAOb,iBAAiB,UAAU,eAC5BwB,EAAUC,KAAKC,QACfF,EALQ,MAMVF,EAAQZ,UAAUE,IAAI,MACtBU,EAAQZ,UAAUC,OAAO,QACzBU,GAAO,GAELG,GAVQ,KAUoB,GAARH,IACtBC,EAAQZ,UAAUE,IAAI,QACtBU,EAAQZ,UAAUC,OAAO,MACzBU,GAAO,MAIXC,EAAQK,QAAU,SAAUC,GAE1Bf,OAAOgB,SAAS,CACdC,KAAML,KAAKM,QACXC,IAAK,EACLC,SAAU,YAwBZC,OF+FG,MAAMC,EACL,OADKA,EAEF,UAFEA,EAGH,SAHGA,EAIJ,QAwBF,SAASC,EAAsBC,EAAQC,EAAgBC,EAAS/C,cACjEgD,EAAW,MAEXH,aAAkBI,QACpBD,EAAW,CAACH,QACP,GAAIA,aAAkBK,UAAYC,MAAMC,QAAQP,GACrDG,EAAWG,MAAME,KAAKR,OACjB,OACCS,EAA6B,iBAAXT,EAAsBA,EAASC,EACnDQ,IACFN,EAAWG,MAAME,KAAKN,EAAOQ,iBAAiBD,YAI3CN,yrMA5BF,SAAwBQ,MACb,IAAZA,EAAEC,OAAeD,EAAEE,SAAWF,EAAEG,SAAWH,EAAEI,QAAUJ,EAAEK,gBACpD;;;;MG1JJ,SAASlE,EAAcC,EAAWC,EAASC,SAC1CC,EAAKC,SAASL,cAAcE,GAAW,cACzCD,IACFG,EAAGH,UAAYA,GAEbE,GACFA,EAAWG,YAAYF,GAElBA,EAGF,SAAS+D,EAAeC,EAAIC,UACjCD,EAAGE,EAAID,EAAGC,EACVF,EAAGG,EAAIF,EAAGE,OACIC,IAAVH,EAAGI,KACLL,EAAGK,GAAKJ,EAAGI,IAENL,EAIF,SAASM,EAAWC,GACzBA,EAAEL,EAAIM,KAAKC,MAAMF,EAAEL,GACnBK,EAAEJ,EAAIK,KAAKC,MAAMF,EAAEJ,GASd,SAASO,EAAmBV,EAAIC,SAC/BC,EAAIM,KAAKG,IAAIX,EAAGE,EAAID,EAAGC,GACvBC,EAAIK,KAAKG,IAAIX,EAAGG,EAAIF,EAAGE,UACtBK,KAAKI,KAAMV,EAAIA,EAAMC,EAAIA,GAS3B,SAASU,EAAYb,EAAIC,UACvBD,EAAGE,IAAMD,EAAGC,GAAKF,EAAGG,IAAMF,EAAGE,EAU/B,SAASW,EAAMC,EAAKC,EAAKC,UACvBT,KAAKQ,IAAIR,KAAKS,IAAIF,EAAKC,GAAMC,GAU/B,SAASC,EAAkBhB,EAAGC,EAAGgB,OAClCC,EAAY,eACZlB,EAAI,OAASC,GAAK,GADN,oBAIFC,IAAVe,IACFC,GAAa,YACTD,EAAQ,IAAMA,EACd,OAGCC,EAWF,SAASC,EAAarF,EAAIkE,EAAGC,EAAGgB,GACrCnF,EAAGM,MAAMgF,UAAYJ,EAAkBhB,EAAGC,EAAGgB,GAaxC,SAASI,EAAmBvF,EAAIwF,EAAMC,EAAUC,GAIrD1F,EAAGM,MAAMqF,WAAaH,EACjBA,EAAO,IAAMC,EAAW,OAASC,GAff,4BAgBnB,OAMC,SAASvF,EAAeH,EAAII,EAAGC,GACpCL,EAAGM,MAAMC,MAAsB,iBAANH,EAAmBA,EAAI,KAAQA,EACxDJ,EAAGM,MAAME,OAAuB,iBAANH,EAAmBA,EAAI,KAAQA,EAsBpD,MAAMuC,EACL,OADKA,EAEF,UAFEA,EAGH,SAHGA,EAIJ,0kwBAUF,SAAwBa,MACb,IAAZA,EAAEC,OAAeD,EAAEE,SAAWF,EAAEG,SAAWH,EAAEI,QAAUJ,EAAEK,gBACpD,wzCAlCTyB,2gaAGK,IAAqBK,GAAAA,oBACtB,WAAYA,EACPA,EAAIC,SAGTD,EAAIE,SACCC,QAAQC,QAAQJ,GAGlB,IAAIG,SAAQ,CAACC,EAASC,KAC3BL,EAAIM,OAAS,IAAMF,EAAQJ,GAC3BA,EAAIO,QAAUF,8vIAgCX,SAA+BnD,EAAQC,EAAgBC,EAAS/C,cACjEgD,EAAW,MAEXH,aAAkBI,QACpBD,EAAW,CAACH,QACP,GAAIA,aAAkBK,UAAYC,MAAMC,QAAQP,GACrDG,EAAWG,MAAME,KAAKR,OACjB,OACCS,EAA6B,iBAAXT,EAAsBA,EAASC,EACnDQ,IACFN,EAAWG,MAAME,KAAKN,EAAOQ,iBAAiBD,YAI3CN,o5LCjLQ,IAAImD,EAAmB,CACtCC,gBAAiB,gBACjBC,cAAe,WACfC,WAAYC,KAELC,OAEW,IAAIL,EAAmB,CACzCC,gBAAiB,cACjBE,WAAYC,KAEFC"}